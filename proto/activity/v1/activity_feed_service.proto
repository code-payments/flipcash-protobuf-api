syntax = "proto3";

package flipcash.activity.v1;

option go_package = "github.com/code-payments/flipcash-protobuf-api/generated/go/activity/v1;activitypb";
option java_package = "com.codeinc.flipcash.gen.activity.v1";
option objc_class_prefix = "FPBActivityV1";

import "activity/v1/model.proto";
import "common/v1/common.proto";
import "validate/validate.proto";

service ActivityFeed {
    // GetLatestNotifications gets the latest N notifications in a user's
    // activity feed. Results will be ordered by descending timestamp.
    rpc GetLatestNotifications(GetLatestNotificationsRequest) returns (GetLatestNotificationsResponse);

    // GetPagedNotifications gets all notifications using a paging API.
    rpc GetPagedNotifications(GetPagedNotificationsRequest) returns (GetPagedNotificationsResponse);

    // GetBatchNotifications gets a batch of notifications by ID.
    rpc GetBatchNotifications(GetBatchNotificationsRequest) returns (GetBatchNotificationsResponse);
}

message GetLatestNotificationsRequest {
    // The activity feed to fetch notifications from
    ActivityFeedType type = 1 [(validate.rules).enum.in = 1];

    // Maximum number of notifications to return. If <= 0, the server default is used
    int32 max_items = 2 [(validate.rules).int32.lte = 1024];

    common.v1.Auth auth = 3 [(validate.rules).message.required = true];
}

message GetLatestNotificationsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        DENIED = 1;
    }

    repeated Notification notifications = 2 [(validate.rules).repeated = {
        max_items: 1024
    }];
}

message GetPagedNotificationsRequest {
    // The activity feed to fetch notifications from
    ActivityFeedType type = 1 [(validate.rules).enum.in = 1];

    common.v1.QueryOptions query_options = 2 [(validate.rules).message.required = true];

    common.v1.Auth auth = 3 [(validate.rules).message.required = true];
}

message GetPagedNotificationsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        DENIED = 1;
    }

    repeated Notification notifications = 2 [(validate.rules).repeated = {
        max_items: 1024
    }];
}

message GetBatchNotificationsRequest {
    repeated NotificationId ids = 1 [(validate.rules).repeated = {
        min_items: 1
        max_items: 1024
    }];

    common.v1.Auth auth = 2 [(validate.rules).message.required = true];
}

message GetBatchNotificationsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        DENIED = 1;
        NOT_FOUND = 2;
    }

    repeated Notification notifications = 2 [(validate.rules).repeated = {
        max_items: 1024
    }];
}
