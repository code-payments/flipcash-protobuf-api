syntax = "proto3";

package flipcash.pool.v1;

option go_package = "github.com/code-payments/flipcash-protobuf-api/generated/go/pool/v1;poolpb";
option java_package = "com.codeinc.flipcash.gen.pool.v1";
option objc_class_prefix = "FPBPoolV1";

import "pool/v1/model.proto";
import "common/v1/common.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service Pool {
    // CreatePool creates a new pool
    rpc CreatePool(CreatePoolRequest) returns (CreatePoolResponse);

    // GetPool gets pool metadata by its ID
    rpc GetPool(GetPoolRequest) returns (GetPoolResponse);

    // GetPagedPools gets all pools for a user over a paging API
    //
    // Note: Only bet summaries are provided in the response
    rpc GetPagedPools(GetPagedPoolsRequest) returns (GetPagedPoolsResponse);

    // ClosePool closes a pool from additional bets
    rpc ClosePool(ClosePoolRequest) returns (ClosePoolResponse);

    // ResolvePool resolves a pool by declaring the pool's outcome. The pool creator
    // resolves a pool by calling this RPC first, then SubmitIntent to distribute funds
    // to the winning participants.
    rpc ResolvePool(ResolvePoolRequest) returns (ResolvePoolResponse);

    // MakeBet creates a new bet against a pool. Pool participants make a bet by
    // calling MakeBet to create an initially unpaid bet, then SubmitIntent for
    // payment where:
    //  1. Intent ID == Bet.id
    //  2. Payment amount == PoolMetadata.buy_in
    //  3. Payment destination == PoolMetadata.funding_destination
    rpc MakeBet(MakeBetRequest) returns (MakeBetResponse);
}

message CreatePoolRequest {
    SignedPoolMetadata pool = 1 [(validate.rules).message.required = true];

    common.v1.Signature rendezvous_signature = 2 [(validate.rules).message.required = true];

    common.v1.Auth auth = 3 [(validate.rules).message.required = true];
}

message CreatePoolResponse {
    Result result = 1;
    enum Result {
        OK                         = 0;
        RENDEZVOUS_EXISTS          = 1;
        FUNDING_DESTINATION_EXISTS = 2;
    }
}

message GetPoolRequest {
    PoolId id = 1;

    bool exclude_bets = 2;
}

message GetPoolResponse {
    Result result = 1;
    enum Result {
        OK        = 0;
        NOT_FOUND = 1;
    }

    PoolMetadata pool = 2;
}

message GetPagedPoolsRequest {
    common.v1.QueryOptions query_options = 1 [(validate.rules).message.required = true];

    common.v1.Auth auth = 2 [(validate.rules).message.required = true];
}

message GetPagedPoolsResponse {
    Result result = 1;
    enum Result {
        OK        = 0;
        NOT_FOUND = 1;
    }

    repeated PoolMetadata pools = 2 [(validate.rules).repeated = {
        max_items: 1024
    }];
}

message ClosePoolRequest {
    PoolId id = 1 [(validate.rules).message.required = true];

    google.protobuf.Timestamp closed_at = 2 [(validate.rules).timestamp.required = true];

    common.v1.Signature new_rendezvous_signature = 3 [(validate.rules).message.required = true];

    common.v1.Auth auth = 4 [(validate.rules).message.required = true];
}

message ClosePoolResponse {
    Result result = 1;
    enum Result {
        OK        = 0;
        DENIED    = 1;
        NOT_FOUND = 2;
    }
}

message ResolvePoolRequest {
    PoolId id = 1 [(validate.rules).message.required = true];
    
    Resolution resolution = 2 [(validate.rules).message.required = true];

    common.v1.Signature new_rendezvous_signature = 3 [(validate.rules).message.required = true];

    common.v1.Auth auth = 4 [(validate.rules).message.required = true];
}

message ResolvePoolResponse {
    Result result = 1;
    enum Result {
        OK                         = 0;
        DENIED                     = 1;
        NOT_FOUND                  = 2;
        DIFFERENT_OUTCOME_DECLARED = 3;
        POOL_OPEN                  = 4;
    }
}

message MakeBetRequest {
    PoolId pool_id = 1 [(validate.rules).message.required = true];

    SignedBetMetadata bet = 2 [(validate.rules).message.required = true];

    common.v1.Signature rendezvous_signature = 3 [(validate.rules).message.required = true];

    common.v1.Auth auth = 4 [(validate.rules).message.required = true];
}

message MakeBetResponse {
    Result result = 1;
    enum Result {
        OK                = 0;
        POOL_NOT_FOUND    = 1;
        POOL_CLOSED       = 2;
        MULTIPLE_BETS     = 3;
        MAX_BETS_RECEIVED = 4;
    }
}
