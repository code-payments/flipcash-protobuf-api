syntax = "proto3";

package flipcash.phone.v1;

option go_package = "github.com/code-payments/flipcash-protobuf-api/generated/go/phone/v1;phonepb";
option java_package = "com.codeinc.flipcash.gen.phone.v1";
option objc_class_prefix = "FPBPhoneV1";

import "common/v1/common.proto";
import "phone/v1/model.proto";
import "validate/validate.proto";

service PhoneVerification {
    // SendVerificationCode sends a verification code to the provided phone number
    // over SMS. If an active verification is already taking place, the existing code
    // will be resent.
    rpc SendVerificationCode(SendVerificationCodeRequest) returns (SendVerificationCodeResponse);

    // CheckVerificationCode validates a verification code. On success, the phone number
    // is linked to the user. Any previous links are overwritten.
    rpc CheckVerificationCode(CheckVerificationCodeRequest) returns (CheckVerificationCodeResponse);

     // Unlink removes the link of a phone number from a user.
    rpc Unlink(UnlinkRequest) returns (UnlinkResponse);
}

message SendVerificationCodeRequest {
    // The phone number to send a verification code over SMS to
    PhoneNumber phone_number = 1 [(validate.rules).message.required = true];

    // The app platform that's making this request
    common.v1.Platform platform = 2 [(validate.rules).enum = {in: [1,2]}];

    common.v1.Auth auth = 3 [(validate.rules).message.required = true];
}

message SendVerificationCodeResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        // SMS is denied
        DENIED = 1;
        // SMS is rate limited (eg. by IP, phone number, user, etc) and was not sent.
        RATE_LIMITED = 2;
        // The phone number is not real because it fails Twilio lookup.
        INVALID_PHONE_NUMBER = 3;
        // The phone number is valid, but it maps to an unsupported type of phone
        // like a landline.
        UNSUPPORTED_PHONE_TYPE = 4;
    }
}

message CheckVerificationCodeRequest {
    // The phone number being verified
    PhoneNumber phone_number = 1 [(validate.rules).message.required = true];

    // The verification code received via SMS
    VerificationCode code = 2 [(validate.rules).message.required = true];

    common.v1.Auth auth = 3 [(validate.rules).message.required = true];
}

message CheckVerificationCodeResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        DENIED = 1;
        // The call is rate limited (eg. by IP, phone number, etc). The code is
        // not verified.
        RATE_LIMITED = 2;
        // The provided verification code is invalid. The user may retry
        // enterring the code if this is received. When max attempts are
        // received, NO_VERIFICATION will be returned.
        INVALID_CODE = 3;
        // There is no verification in progress for the phone number. Several
        // reasons this can occur include a verification being expired or having
        // reached a maximum check threshold. The client must initiate a new
        // verification using SendVerificationCode.
        NO_VERIFICATION = 4;
    }
}

message UnlinkRequest {
    // The phone number to unlink
    PhoneNumber phone_number = 1 [(validate.rules).message.required = true];

    common.v1.Auth auth = 2 [(validate.rules).message.required = true];
}

message UnlinkResponse {
    Result result = 1;
	enum Result {
		OK     = 0;
		DENIED = 1;
	}
}
