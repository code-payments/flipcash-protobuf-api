// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: event/v1/event_streaming_service.proto

package eventpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventStreaming_StreamEvents_FullMethodName  = "/flipcash.event.v1.EventStreaming/StreamEvents"
	EventStreaming_ForwardEvents_FullMethodName = "/flipcash.event.v1.EventStreaming/ForwardEvents"
)

// EventStreamingClient is the client API for EventStreaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStreamingClient interface {
	// StreamEvents streams events for the requesting user.
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamEventsRequest, StreamEventsResponse], error)
	// ForwardEvents is an internal RPC for forwarding events to another server.
	ForwardEvents(ctx context.Context, in *ForwardEventsRequest, opts ...grpc.CallOption) (*ForwardEventsResponse, error)
}

type eventStreamingClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStreamingClient(cc grpc.ClientConnInterface) EventStreamingClient {
	return &eventStreamingClient{cc}
}

func (c *eventStreamingClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamEventsRequest, StreamEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventStreaming_ServiceDesc.Streams[0], EventStreaming_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, StreamEventsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventStreaming_StreamEventsClient = grpc.BidiStreamingClient[StreamEventsRequest, StreamEventsResponse]

func (c *eventStreamingClient) ForwardEvents(ctx context.Context, in *ForwardEventsRequest, opts ...grpc.CallOption) (*ForwardEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardEventsResponse)
	err := c.cc.Invoke(ctx, EventStreaming_ForwardEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventStreamingServer is the server API for EventStreaming service.
// All implementations must embed UnimplementedEventStreamingServer
// for forward compatibility.
type EventStreamingServer interface {
	// StreamEvents streams events for the requesting user.
	StreamEvents(grpc.BidiStreamingServer[StreamEventsRequest, StreamEventsResponse]) error
	// ForwardEvents is an internal RPC for forwarding events to another server.
	ForwardEvents(context.Context, *ForwardEventsRequest) (*ForwardEventsResponse, error)
	mustEmbedUnimplementedEventStreamingServer()
}

// UnimplementedEventStreamingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventStreamingServer struct{}

func (UnimplementedEventStreamingServer) StreamEvents(grpc.BidiStreamingServer[StreamEventsRequest, StreamEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedEventStreamingServer) ForwardEvents(context.Context, *ForwardEventsRequest) (*ForwardEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardEvents not implemented")
}
func (UnimplementedEventStreamingServer) mustEmbedUnimplementedEventStreamingServer() {}
func (UnimplementedEventStreamingServer) testEmbeddedByValue()                        {}

// UnsafeEventStreamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStreamingServer will
// result in compilation errors.
type UnsafeEventStreamingServer interface {
	mustEmbedUnimplementedEventStreamingServer()
}

func RegisterEventStreamingServer(s grpc.ServiceRegistrar, srv EventStreamingServer) {
	// If the following call pancis, it indicates UnimplementedEventStreamingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventStreaming_ServiceDesc, srv)
}

func _EventStreaming_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventStreamingServer).StreamEvents(&grpc.GenericServerStream[StreamEventsRequest, StreamEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventStreaming_StreamEventsServer = grpc.BidiStreamingServer[StreamEventsRequest, StreamEventsResponse]

func _EventStreaming_ForwardEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStreamingServer).ForwardEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStreaming_ForwardEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStreamingServer).ForwardEvents(ctx, req.(*ForwardEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventStreaming_ServiceDesc is the grpc.ServiceDesc for EventStreaming service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStreaming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flipcash.event.v1.EventStreaming",
	HandlerType: (*EventStreamingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardEvents",
			Handler:    _EventStreaming_ForwardEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _EventStreaming_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "event/v1/event_streaming_service.proto",
}
