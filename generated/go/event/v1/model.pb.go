// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: event/v1/model.proto

package eventpb

import (
	v1 "github.com/code-payments/flipcash-protobuf-api/generated/go/common/v1"
	v11 "github.com/code-payments/flipcash-protobuf-api/generated/go/pool/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventId) Reset() {
	*x = EventId{}
	mi := &file_event_v1_model_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventId) ProtoMessage() {}

func (x *EventId) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_model_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventId.ProtoReflect.Descriptor instead.
func (*EventId) Descriptor() ([]byte, []int) {
	return file_event_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *EventId) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

// todo: define additional events
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *EventId               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ts *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
	// Types that are assignable to Type:
	//
	//	*Event_Test
	//	*Event_PoolResolved
	//	*Event_PoolBetUpdate
	Type isEvent_Type `protobuf_oneof:"type"`
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_event_v1_model_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_model_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_event_v1_model_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetId() *EventId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Event) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetTest() *TestEvent {
	if x, ok := x.GetType().(*Event_Test); ok {
		return x.Test
	}
	return nil
}

func (x *Event) GetPoolResolved() *PoolResolvedEvent {
	if x, ok := x.GetType().(*Event_PoolResolved); ok {
		return x.PoolResolved
	}
	return nil
}

func (x *Event) GetPoolBetUpdate() *PoolBetUpdateEvent {
	if x, ok := x.GetType().(*Event_PoolBetUpdate); ok {
		return x.PoolBetUpdate
	}
	return nil
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_Test struct {
	Test *TestEvent `protobuf:"bytes,3,opt,name=test,proto3,oneof"`
}

type Event_PoolResolved struct {
	PoolResolved *PoolResolvedEvent `protobuf:"bytes,100,opt,name=pool_resolved,json=poolResolved,proto3,oneof"`
}

type Event_PoolBetUpdate struct {
	PoolBetUpdate *PoolBetUpdateEvent `protobuf:"bytes,101,opt,name=pool_bet_update,json=poolBetUpdate,proto3,oneof"`
}

func (*Event_Test) isEvent_Type() {}

func (*Event_PoolResolved) isEvent_Type() {}

func (*Event_PoolBetUpdate) isEvent_Type() {}

type EventBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *EventBatch) Reset() {
	*x = EventBatch{}
	mi := &file_event_v1_model_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBatch) ProtoMessage() {}

func (x *EventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_model_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBatch.ProtoReflect.Descriptor instead.
func (*EventBatch) Descriptor() ([]byte, []int) {
	return file_event_v1_model_proto_rawDescGZIP(), []int{2}
}

func (x *EventBatch) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type UserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *v1.UserId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Event  *Event     `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *UserEvent) Reset() {
	*x = UserEvent{}
	mi := &file_event_v1_model_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent) ProtoMessage() {}

func (x *UserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_model_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent.ProtoReflect.Descriptor instead.
func (*UserEvent) Descriptor() ([]byte, []int) {
	return file_event_v1_model_proto_rawDescGZIP(), []int{3}
}

func (x *UserEvent) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UserEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type UserEventBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*UserEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *UserEventBatch) Reset() {
	*x = UserEventBatch{}
	mi := &file_event_v1_model_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserEventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventBatch) ProtoMessage() {}

func (x *UserEventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_model_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventBatch.ProtoReflect.Descriptor instead.
func (*UserEventBatch) Descriptor() ([]byte, []int) {
	return file_event_v1_model_proto_rawDescGZIP(), []int{4}
}

func (x *UserEventBatch) GetEvents() []*UserEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type TestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hops  []string `protobuf:"bytes,1,rep,name=hops,proto3" json:"hops,omitempty"`
	Nonce uint64   `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *TestEvent) Reset() {
	*x = TestEvent{}
	mi := &file_event_v1_model_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestEvent) ProtoMessage() {}

func (x *TestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_model_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestEvent.ProtoReflect.Descriptor instead.
func (*TestEvent) Descriptor() ([]byte, []int) {
	return file_event_v1_model_proto_rawDescGZIP(), []int{5}
}

func (x *TestEvent) GetHops() []string {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *TestEvent) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// Event sent when a pool has been resolved
type PoolResolvedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latest signed pool metadata, which is guaranteed to contain a resolution
	Pool *v11.SignedPoolMetadata `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// The final bet summary for the pool
	BetSummary *v11.BetSummary `protobuf:"bytes,2,opt,name=bet_summary,json=betSummary,proto3" json:"bet_summary,omitempty"`
	// The user's outcome for the pool
	UserSummary *v11.UserPoolSummary `protobuf:"bytes,3,opt,name=user_summary,json=userSummary,proto3" json:"user_summary,omitempty"`
}

func (x *PoolResolvedEvent) Reset() {
	*x = PoolResolvedEvent{}
	mi := &file_event_v1_model_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolResolvedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolResolvedEvent) ProtoMessage() {}

func (x *PoolResolvedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_model_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolResolvedEvent.ProtoReflect.Descriptor instead.
func (*PoolResolvedEvent) Descriptor() ([]byte, []int) {
	return file_event_v1_model_proto_rawDescGZIP(), []int{6}
}

func (x *PoolResolvedEvent) GetPool() *v11.SignedPoolMetadata {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *PoolResolvedEvent) GetBetSummary() *v11.BetSummary {
	if x != nil {
		return x.BetSummary
	}
	return nil
}

func (x *PoolResolvedEvent) GetUserSummary() *v11.UserPoolSummary {
	if x != nil {
		return x.UserSummary
	}
	return nil
}

// Event sent when a bet is made against a pool
type PoolBetUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pool ID the bet update is for
	PoolId *v11.PoolId `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// The latest bet summary for the pool
	BetSummary *v11.BetSummary `protobuf:"bytes,2,opt,name=bet_summary,json=betSummary,proto3" json:"bet_summary,omitempty"`
}

func (x *PoolBetUpdateEvent) Reset() {
	*x = PoolBetUpdateEvent{}
	mi := &file_event_v1_model_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolBetUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolBetUpdateEvent) ProtoMessage() {}

func (x *PoolBetUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_model_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolBetUpdateEvent.ProtoReflect.Descriptor instead.
func (*PoolBetUpdateEvent) Descriptor() ([]byte, []int) {
	return file_event_v1_model_proto_rawDescGZIP(), []int{7}
}

func (x *PoolBetUpdateEvent) GetPoolId() *v11.PoolId {
	if x != nil {
		return x.PoolId
	}
	return nil
}

func (x *PoolBetUpdateEvent) GetBetSummary() *v11.BetSummary {
	if x != nil {
		return x.BetSummary
	}
	return nil
}

type ServerPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp the ping was sent on the stream, for client to get a sense
	// of potential network latency
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The delay server will apply before sending the next ping
	PingDelay *durationpb.Duration `protobuf:"bytes,2,opt,name=ping_delay,json=pingDelay,proto3" json:"ping_delay,omitempty"`
}

func (x *ServerPing) Reset() {
	*x = ServerPing{}
	mi := &file_event_v1_model_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPing) ProtoMessage() {}

func (x *ServerPing) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_model_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPing.ProtoReflect.Descriptor instead.
func (*ServerPing) Descriptor() ([]byte, []int) {
	return file_event_v1_model_proto_rawDescGZIP(), []int{8}
}

func (x *ServerPing) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ServerPing) GetPingDelay() *durationpb.Duration {
	if x != nil {
		return x.PingDelay
	}
	return nil
}

type ClientPong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp the Pong was sent on the stream, for server to get a sense
	// of potential network latency
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ClientPong) Reset() {
	*x = ClientPong{}
	mi := &file_event_v1_model_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPong) ProtoMessage() {}

func (x *ClientPong) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_model_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPong.ProtoReflect.Descriptor instead.
func (*ClientPong) Descriptor() ([]byte, []int) {
	return file_event_v1_model_proto_rawDescGZIP(), []int{9}
}

func (x *ClientPong) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_event_v1_model_proto protoreflect.FileDescriptor

var file_event_v1_model_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x24, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x10,
	0x18, 0x10, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x02, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x4f, 0x0a,
	0x0f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73,
	0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x42,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x4b, 0x0a, 0x0a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x53, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x11,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x42, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x47, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4e,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x9a,
	0x01, 0x0a, 0x12, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73,
	0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x62, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x94, 0x01, 0x0a, 0x0a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42,
	0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x22, 0x50, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6e, 0x67,
	0x12, 0x42, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x7f, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x69, 0x6e, 0x63, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x67, 0x65, 0x6e,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0xa2, 0x02, 0x0a, 0x46, 0x50, 0x42, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_v1_model_proto_rawDescOnce sync.Once
	file_event_v1_model_proto_rawDescData = file_event_v1_model_proto_rawDesc
)

func file_event_v1_model_proto_rawDescGZIP() []byte {
	file_event_v1_model_proto_rawDescOnce.Do(func() {
		file_event_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_v1_model_proto_rawDescData)
	})
	return file_event_v1_model_proto_rawDescData
}

var file_event_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_event_v1_model_proto_goTypes = []any{
	(*EventId)(nil),                // 0: flipcash.event.v1.EventId
	(*Event)(nil),                  // 1: flipcash.event.v1.Event
	(*EventBatch)(nil),             // 2: flipcash.event.v1.EventBatch
	(*UserEvent)(nil),              // 3: flipcash.event.v1.UserEvent
	(*UserEventBatch)(nil),         // 4: flipcash.event.v1.UserEventBatch
	(*TestEvent)(nil),              // 5: flipcash.event.v1.TestEvent
	(*PoolResolvedEvent)(nil),      // 6: flipcash.event.v1.PoolResolvedEvent
	(*PoolBetUpdateEvent)(nil),     // 7: flipcash.event.v1.PoolBetUpdateEvent
	(*ServerPing)(nil),             // 8: flipcash.event.v1.ServerPing
	(*ClientPong)(nil),             // 9: flipcash.event.v1.ClientPong
	(*timestamppb.Timestamp)(nil),  // 10: google.protobuf.Timestamp
	(*v1.UserId)(nil),              // 11: flipcash.common.v1.UserId
	(*v11.SignedPoolMetadata)(nil), // 12: flipcash.pool.v1.SignedPoolMetadata
	(*v11.BetSummary)(nil),         // 13: flipcash.pool.v1.BetSummary
	(*v11.UserPoolSummary)(nil),    // 14: flipcash.pool.v1.UserPoolSummary
	(*v11.PoolId)(nil),             // 15: flipcash.pool.v1.PoolId
	(*durationpb.Duration)(nil),    // 16: google.protobuf.Duration
}
var file_event_v1_model_proto_depIdxs = []int32{
	0,  // 0: flipcash.event.v1.Event.id:type_name -> flipcash.event.v1.EventId
	10, // 1: flipcash.event.v1.Event.ts:type_name -> google.protobuf.Timestamp
	5,  // 2: flipcash.event.v1.Event.test:type_name -> flipcash.event.v1.TestEvent
	6,  // 3: flipcash.event.v1.Event.pool_resolved:type_name -> flipcash.event.v1.PoolResolvedEvent
	7,  // 4: flipcash.event.v1.Event.pool_bet_update:type_name -> flipcash.event.v1.PoolBetUpdateEvent
	1,  // 5: flipcash.event.v1.EventBatch.events:type_name -> flipcash.event.v1.Event
	11, // 6: flipcash.event.v1.UserEvent.user_id:type_name -> flipcash.common.v1.UserId
	1,  // 7: flipcash.event.v1.UserEvent.event:type_name -> flipcash.event.v1.Event
	3,  // 8: flipcash.event.v1.UserEventBatch.events:type_name -> flipcash.event.v1.UserEvent
	12, // 9: flipcash.event.v1.PoolResolvedEvent.pool:type_name -> flipcash.pool.v1.SignedPoolMetadata
	13, // 10: flipcash.event.v1.PoolResolvedEvent.bet_summary:type_name -> flipcash.pool.v1.BetSummary
	14, // 11: flipcash.event.v1.PoolResolvedEvent.user_summary:type_name -> flipcash.pool.v1.UserPoolSummary
	15, // 12: flipcash.event.v1.PoolBetUpdateEvent.pool_id:type_name -> flipcash.pool.v1.PoolId
	13, // 13: flipcash.event.v1.PoolBetUpdateEvent.bet_summary:type_name -> flipcash.pool.v1.BetSummary
	10, // 14: flipcash.event.v1.ServerPing.timestamp:type_name -> google.protobuf.Timestamp
	16, // 15: flipcash.event.v1.ServerPing.ping_delay:type_name -> google.protobuf.Duration
	10, // 16: flipcash.event.v1.ClientPong.timestamp:type_name -> google.protobuf.Timestamp
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_event_v1_model_proto_init() }
func file_event_v1_model_proto_init() {
	if File_event_v1_model_proto != nil {
		return
	}
	file_event_v1_model_proto_msgTypes[1].OneofWrappers = []any{
		(*Event_Test)(nil),
		(*Event_PoolResolved)(nil),
		(*Event_PoolBetUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_v1_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_v1_model_proto_goTypes,
		DependencyIndexes: file_event_v1_model_proto_depIdxs,
		MessageInfos:      file_event_v1_model_proto_msgTypes,
	}.Build()
	File_event_v1_model_proto = out.File
	file_event_v1_model_proto_rawDesc = nil
	file_event_v1_model_proto_goTypes = nil
	file_event_v1_model_proto_depIdxs = nil
}
