// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: event/v1/event_streaming_service.proto

package eventpb

import (
	v1 "github.com/code-payments/flipcash-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamEventsResponse_StreamError_Code int32

const (
	StreamEventsResponse_StreamError_DENIED            StreamEventsResponse_StreamError_Code = 0
	StreamEventsResponse_StreamError_INVALID_TIMESTAMP StreamEventsResponse_StreamError_Code = 1
)

// Enum value maps for StreamEventsResponse_StreamError_Code.
var (
	StreamEventsResponse_StreamError_Code_name = map[int32]string{
		0: "DENIED",
		1: "INVALID_TIMESTAMP",
	}
	StreamEventsResponse_StreamError_Code_value = map[string]int32{
		"DENIED":            0,
		"INVALID_TIMESTAMP": 1,
	}
)

func (x StreamEventsResponse_StreamError_Code) Enum() *StreamEventsResponse_StreamError_Code {
	p := new(StreamEventsResponse_StreamError_Code)
	*p = x
	return p
}

func (x StreamEventsResponse_StreamError_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamEventsResponse_StreamError_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_event_v1_event_streaming_service_proto_enumTypes[0].Descriptor()
}

func (StreamEventsResponse_StreamError_Code) Type() protoreflect.EnumType {
	return &file_event_v1_event_streaming_service_proto_enumTypes[0]
}

func (x StreamEventsResponse_StreamError_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamEventsResponse_StreamError_Code.Descriptor instead.
func (StreamEventsResponse_StreamError_Code) EnumDescriptor() ([]byte, []int) {
	return file_event_v1_event_streaming_service_proto_rawDescGZIP(), []int{1, 0, 0}
}

type ForwardEventsResponse_Result int32

const (
	ForwardEventsResponse_OK     ForwardEventsResponse_Result = 0
	ForwardEventsResponse_DENIED ForwardEventsResponse_Result = 1
)

// Enum value maps for ForwardEventsResponse_Result.
var (
	ForwardEventsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	ForwardEventsResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x ForwardEventsResponse_Result) Enum() *ForwardEventsResponse_Result {
	p := new(ForwardEventsResponse_Result)
	*p = x
	return p
}

func (x ForwardEventsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForwardEventsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_event_v1_event_streaming_service_proto_enumTypes[1].Descriptor()
}

func (ForwardEventsResponse_Result) Type() protoreflect.EnumType {
	return &file_event_v1_event_streaming_service_proto_enumTypes[1]
}

func (x ForwardEventsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForwardEventsResponse_Result.Descriptor instead.
func (ForwardEventsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_event_v1_event_streaming_service_proto_rawDescGZIP(), []int{3, 0}
}

type StreamEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamEventsRequest_Params_
	//	*StreamEventsRequest_Pong
	Type isStreamEventsRequest_Type `protobuf_oneof:"type"`
}

func (x *StreamEventsRequest) Reset() {
	*x = StreamEventsRequest{}
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsRequest) ProtoMessage() {}

func (x *StreamEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamEventsRequest) Descriptor() ([]byte, []int) {
	return file_event_v1_event_streaming_service_proto_rawDescGZIP(), []int{0}
}

func (m *StreamEventsRequest) GetType() isStreamEventsRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamEventsRequest) GetParams() *StreamEventsRequest_Params {
	if x, ok := x.GetType().(*StreamEventsRequest_Params_); ok {
		return x.Params
	}
	return nil
}

func (x *StreamEventsRequest) GetPong() *v1.ClientPong {
	if x, ok := x.GetType().(*StreamEventsRequest_Pong); ok {
		return x.Pong
	}
	return nil
}

type isStreamEventsRequest_Type interface {
	isStreamEventsRequest_Type()
}

type StreamEventsRequest_Params_ struct {
	Params *StreamEventsRequest_Params `protobuf:"bytes,1,opt,name=params,proto3,oneof"`
}

type StreamEventsRequest_Pong struct {
	Pong *v1.ClientPong `protobuf:"bytes,2,opt,name=pong,proto3,oneof"`
}

func (*StreamEventsRequest_Params_) isStreamEventsRequest_Type() {}

func (*StreamEventsRequest_Pong) isStreamEventsRequest_Type() {}

type StreamEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamEventsResponse_Ping
	//	*StreamEventsResponse_Error
	//	*StreamEventsResponse_Events
	Type isStreamEventsResponse_Type `protobuf_oneof:"type"`
}

func (x *StreamEventsResponse) Reset() {
	*x = StreamEventsResponse{}
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse) ProtoMessage() {}

func (x *StreamEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse) Descriptor() ([]byte, []int) {
	return file_event_v1_event_streaming_service_proto_rawDescGZIP(), []int{1}
}

func (m *StreamEventsResponse) GetType() isStreamEventsResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamEventsResponse) GetPing() *v1.ServerPing {
	if x, ok := x.GetType().(*StreamEventsResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *StreamEventsResponse) GetError() *StreamEventsResponse_StreamError {
	if x, ok := x.GetType().(*StreamEventsResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StreamEventsResponse) GetEvents() *EventBatch {
	if x, ok := x.GetType().(*StreamEventsResponse_Events); ok {
		return x.Events
	}
	return nil
}

type isStreamEventsResponse_Type interface {
	isStreamEventsResponse_Type()
}

type StreamEventsResponse_Ping struct {
	Ping *v1.ServerPing `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type StreamEventsResponse_Error struct {
	Error *StreamEventsResponse_StreamError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type StreamEventsResponse_Events struct {
	Events *EventBatch `protobuf:"bytes,3,opt,name=events,proto3,oneof"`
}

func (*StreamEventsResponse_Ping) isStreamEventsResponse_Type() {}

func (*StreamEventsResponse_Error) isStreamEventsResponse_Type() {}

func (*StreamEventsResponse_Events) isStreamEventsResponse_Type() {}

type ForwardEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEvents *UserEventBatch `protobuf:"bytes,1,opt,name=user_events,json=userEvents,proto3" json:"user_events,omitempty"`
}

func (x *ForwardEventsRequest) Reset() {
	*x = ForwardEventsRequest{}
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardEventsRequest) ProtoMessage() {}

func (x *ForwardEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardEventsRequest.ProtoReflect.Descriptor instead.
func (*ForwardEventsRequest) Descriptor() ([]byte, []int) {
	return file_event_v1_event_streaming_service_proto_rawDescGZIP(), []int{2}
}

func (x *ForwardEventsRequest) GetUserEvents() *UserEventBatch {
	if x != nil {
		return x.UserEvents
	}
	return nil
}

type ForwardEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ForwardEventsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipcash.event.v1.ForwardEventsResponse_Result" json:"result,omitempty"`
}

func (x *ForwardEventsResponse) Reset() {
	*x = ForwardEventsResponse{}
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardEventsResponse) ProtoMessage() {}

func (x *ForwardEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardEventsResponse.ProtoReflect.Descriptor instead.
func (*ForwardEventsResponse) Descriptor() ([]byte, []int) {
	return file_event_v1_event_streaming_service_proto_rawDescGZIP(), []int{3}
}

func (x *ForwardEventsResponse) GetResult() ForwardEventsResponse_Result {
	if x != nil {
		return x.Result
	}
	return ForwardEventsResponse_OK
}

type StreamEventsRequest_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *v1.Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// ts contains the time for stream open.
	//
	// It is used primarily as a nonce for auth. Server may reject
	// timestamps that are too far in the future or past.
	Ts *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *StreamEventsRequest_Params) Reset() {
	*x = StreamEventsRequest_Params{}
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEventsRequest_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsRequest_Params) ProtoMessage() {}

func (x *StreamEventsRequest_Params) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsRequest_Params.ProtoReflect.Descriptor instead.
func (*StreamEventsRequest_Params) Descriptor() ([]byte, []int) {
	return file_event_v1_event_streaming_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StreamEventsRequest_Params) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *StreamEventsRequest_Params) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type StreamEventsResponse_StreamError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code StreamEventsResponse_StreamError_Code `protobuf:"varint,1,opt,name=code,proto3,enum=flipcash.event.v1.StreamEventsResponse_StreamError_Code" json:"code,omitempty"`
}

func (x *StreamEventsResponse_StreamError) Reset() {
	*x = StreamEventsResponse_StreamError{}
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEventsResponse_StreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsResponse_StreamError) ProtoMessage() {}

func (x *StreamEventsResponse_StreamError) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_streaming_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsResponse_StreamError.ProtoReflect.Descriptor instead.
func (*StreamEventsResponse_StreamError) Descriptor() ([]byte, []int) {
	return file_event_v1_event_streaming_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StreamEventsResponse_StreamError) GetCode() StreamEventsResponse_StreamError_Code {
	if x != nil {
		return x.Code
	}
	return StreamEventsResponse_StreamError_DENIED
}

var File_event_v1_event_streaming_service_proto protoreflect.FileDescriptor

var file_event_v1_event_streaming_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x1a, 0x76, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x02,
	0x74, 0x73, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0xe8, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73,
	0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4b,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0x86, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x01, 0x42, 0x0b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x64, 0x0a, 0x14, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x7e, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01,
	0x32, 0xd9, 0x01, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x7f, 0x0a, 0x22,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62,
	0xa2, 0x02, 0x0a, 0x46, 0x50, 0x42, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_v1_event_streaming_service_proto_rawDescOnce sync.Once
	file_event_v1_event_streaming_service_proto_rawDescData = file_event_v1_event_streaming_service_proto_rawDesc
)

func file_event_v1_event_streaming_service_proto_rawDescGZIP() []byte {
	file_event_v1_event_streaming_service_proto_rawDescOnce.Do(func() {
		file_event_v1_event_streaming_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_v1_event_streaming_service_proto_rawDescData)
	})
	return file_event_v1_event_streaming_service_proto_rawDescData
}

var file_event_v1_event_streaming_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_event_v1_event_streaming_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_event_v1_event_streaming_service_proto_goTypes = []any{
	(StreamEventsResponse_StreamError_Code)(0), // 0: flipcash.event.v1.StreamEventsResponse.StreamError.Code
	(ForwardEventsResponse_Result)(0),          // 1: flipcash.event.v1.ForwardEventsResponse.Result
	(*StreamEventsRequest)(nil),                // 2: flipcash.event.v1.StreamEventsRequest
	(*StreamEventsResponse)(nil),               // 3: flipcash.event.v1.StreamEventsResponse
	(*ForwardEventsRequest)(nil),               // 4: flipcash.event.v1.ForwardEventsRequest
	(*ForwardEventsResponse)(nil),              // 5: flipcash.event.v1.ForwardEventsResponse
	(*StreamEventsRequest_Params)(nil),         // 6: flipcash.event.v1.StreamEventsRequest.Params
	(*StreamEventsResponse_StreamError)(nil),   // 7: flipcash.event.v1.StreamEventsResponse.StreamError
	(*v1.ClientPong)(nil),                      // 8: flipcash.common.v1.ClientPong
	(*v1.ServerPing)(nil),                      // 9: flipcash.common.v1.ServerPing
	(*EventBatch)(nil),                         // 10: flipcash.event.v1.EventBatch
	(*UserEventBatch)(nil),                     // 11: flipcash.event.v1.UserEventBatch
	(*v1.Auth)(nil),                            // 12: flipcash.common.v1.Auth
	(*timestamppb.Timestamp)(nil),              // 13: google.protobuf.Timestamp
}
var file_event_v1_event_streaming_service_proto_depIdxs = []int32{
	6,  // 0: flipcash.event.v1.StreamEventsRequest.params:type_name -> flipcash.event.v1.StreamEventsRequest.Params
	8,  // 1: flipcash.event.v1.StreamEventsRequest.pong:type_name -> flipcash.common.v1.ClientPong
	9,  // 2: flipcash.event.v1.StreamEventsResponse.ping:type_name -> flipcash.common.v1.ServerPing
	7,  // 3: flipcash.event.v1.StreamEventsResponse.error:type_name -> flipcash.event.v1.StreamEventsResponse.StreamError
	10, // 4: flipcash.event.v1.StreamEventsResponse.events:type_name -> flipcash.event.v1.EventBatch
	11, // 5: flipcash.event.v1.ForwardEventsRequest.user_events:type_name -> flipcash.event.v1.UserEventBatch
	1,  // 6: flipcash.event.v1.ForwardEventsResponse.result:type_name -> flipcash.event.v1.ForwardEventsResponse.Result
	12, // 7: flipcash.event.v1.StreamEventsRequest.Params.auth:type_name -> flipcash.common.v1.Auth
	13, // 8: flipcash.event.v1.StreamEventsRequest.Params.ts:type_name -> google.protobuf.Timestamp
	0,  // 9: flipcash.event.v1.StreamEventsResponse.StreamError.code:type_name -> flipcash.event.v1.StreamEventsResponse.StreamError.Code
	2,  // 10: flipcash.event.v1.EventStreaming.StreamEvents:input_type -> flipcash.event.v1.StreamEventsRequest
	4,  // 11: flipcash.event.v1.EventStreaming.ForwardEvents:input_type -> flipcash.event.v1.ForwardEventsRequest
	3,  // 12: flipcash.event.v1.EventStreaming.StreamEvents:output_type -> flipcash.event.v1.StreamEventsResponse
	5,  // 13: flipcash.event.v1.EventStreaming.ForwardEvents:output_type -> flipcash.event.v1.ForwardEventsResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_event_v1_event_streaming_service_proto_init() }
func file_event_v1_event_streaming_service_proto_init() {
	if File_event_v1_event_streaming_service_proto != nil {
		return
	}
	file_event_v1_model_proto_init()
	file_event_v1_event_streaming_service_proto_msgTypes[0].OneofWrappers = []any{
		(*StreamEventsRequest_Params_)(nil),
		(*StreamEventsRequest_Pong)(nil),
	}
	file_event_v1_event_streaming_service_proto_msgTypes[1].OneofWrappers = []any{
		(*StreamEventsResponse_Ping)(nil),
		(*StreamEventsResponse_Error)(nil),
		(*StreamEventsResponse_Events)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_v1_event_streaming_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_event_v1_event_streaming_service_proto_goTypes,
		DependencyIndexes: file_event_v1_event_streaming_service_proto_depIdxs,
		EnumInfos:         file_event_v1_event_streaming_service_proto_enumTypes,
		MessageInfos:      file_event_v1_event_streaming_service_proto_msgTypes,
	}.Build()
	File_event_v1_event_streaming_service_proto = out.File
	file_event_v1_event_streaming_service_proto_rawDesc = nil
	file_event_v1_event_streaming_service_proto_goTypes = nil
	file_event_v1_event_streaming_service_proto_depIdxs = nil
}
