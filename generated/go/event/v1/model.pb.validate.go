// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: event/v1/model.proto

package eventpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EventId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventIdMultiError, or nil if none found.
func (m *EventId) ValidateAll() error {
	return m.validate(true)
}

func (m *EventId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetId()) != 16 {
		err := EventIdValidationError{
			field:  "Id",
			reason: "value length must be 16 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EventIdMultiError(errors)
	}

	return nil
}

// EventIdMultiError is an error wrapping multiple validation errors returned
// by EventId.ValidateAll() if the designated constraints aren't met.
type EventIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventIdMultiError) AllErrors() []error { return m }

// EventIdValidationError is the validation error returned by EventId.Validate
// if the designated constraints aren't met.
type EventIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventIdValidationError) ErrorName() string { return "EventIdValidationError" }

// Error satisfies the builtin error interface
func (e EventIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventIdValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := EventValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTs() == nil {
		err := EventValidationError{
			field:  "Ts",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *Event_Test:
		if v == nil {
			err := EventValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetTest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Test",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Test",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "Test",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_PoolResolved:
		if v == nil {
			err := EventValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetPoolResolved()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PoolResolved",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PoolResolved",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPoolResolved()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "PoolResolved",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_PoolBetUpdate:
		if v == nil {
			err := EventValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetPoolBetUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PoolBetUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "PoolBetUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPoolBetUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "PoolBetUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := EventValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on EventBatch with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventBatch with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventBatchMultiError, or
// nil if none found.
func (m *EventBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *EventBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetEvents()); l < 1 || l > 1024 {
		err := EventBatchValidationError{
			field:  "Events",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventBatchValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventBatchValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventBatchValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventBatchMultiError(errors)
	}

	return nil
}

// EventBatchMultiError is an error wrapping multiple validation errors
// returned by EventBatch.ValidateAll() if the designated constraints aren't met.
type EventBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventBatchMultiError) AllErrors() []error { return m }

// EventBatchValidationError is the validation error returned by
// EventBatch.Validate if the designated constraints aren't met.
type EventBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventBatchValidationError) ErrorName() string { return "EventBatchValidationError" }

// Error satisfies the builtin error interface
func (e EventBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventBatchValidationError{}

// Validate checks the field values on UserEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserEventMultiError, or nil
// if none found.
func (m *UserEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := UserEventValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserEventValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserEventValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserEventValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEvent() == nil {
		err := UserEventValidationError{
			field:  "Event",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserEventValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserEventValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserEventValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserEventMultiError(errors)
	}

	return nil
}

// UserEventMultiError is an error wrapping multiple validation errors returned
// by UserEvent.ValidateAll() if the designated constraints aren't met.
type UserEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEventMultiError) AllErrors() []error { return m }

// UserEventValidationError is the validation error returned by
// UserEvent.Validate if the designated constraints aren't met.
type UserEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEventValidationError) ErrorName() string { return "UserEventValidationError" }

// Error satisfies the builtin error interface
func (e UserEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEventValidationError{}

// Validate checks the field values on UserEventBatch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserEventBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEventBatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserEventBatchMultiError,
// or nil if none found.
func (m *UserEventBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEventBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetEvents()); l < 1 || l > 1024 {
		err := UserEventBatchValidationError{
			field:  "Events",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserEventBatchValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserEventBatchValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserEventBatchValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserEventBatchMultiError(errors)
	}

	return nil
}

// UserEventBatchMultiError is an error wrapping multiple validation errors
// returned by UserEventBatch.ValidateAll() if the designated constraints
// aren't met.
type UserEventBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEventBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEventBatchMultiError) AllErrors() []error { return m }

// UserEventBatchValidationError is the validation error returned by
// UserEventBatch.Validate if the designated constraints aren't met.
type UserEventBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEventBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEventBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEventBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEventBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEventBatchValidationError) ErrorName() string { return "UserEventBatchValidationError" }

// Error satisfies the builtin error interface
func (e UserEventBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEventBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEventBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEventBatchValidationError{}

// Validate checks the field values on TestEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestEventMultiError, or nil
// if none found.
func (m *TestEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *TestEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nonce

	if len(errors) > 0 {
		return TestEventMultiError(errors)
	}

	return nil
}

// TestEventMultiError is an error wrapping multiple validation errors returned
// by TestEvent.ValidateAll() if the designated constraints aren't met.
type TestEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestEventMultiError) AllErrors() []error { return m }

// TestEventValidationError is the validation error returned by
// TestEvent.Validate if the designated constraints aren't met.
type TestEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestEventValidationError) ErrorName() string { return "TestEventValidationError" }

// Error satisfies the builtin error interface
func (e TestEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestEventValidationError{}

// Validate checks the field values on PoolResolvedEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PoolResolvedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PoolResolvedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PoolResolvedEventMultiError, or nil if none found.
func (m *PoolResolvedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *PoolResolvedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPool() == nil {
		err := PoolResolvedEventValidationError{
			field:  "Pool",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPool()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolResolvedEventValidationError{
					field:  "Pool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolResolvedEventValidationError{
					field:  "Pool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPool()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolResolvedEventValidationError{
				field:  "Pool",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetBetSummary() == nil {
		err := PoolResolvedEventValidationError{
			field:  "BetSummary",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolResolvedEventValidationError{
					field:  "BetSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolResolvedEventValidationError{
					field:  "BetSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolResolvedEventValidationError{
				field:  "BetSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserSummary() == nil {
		err := PoolResolvedEventValidationError{
			field:  "UserSummary",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolResolvedEventValidationError{
					field:  "UserSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolResolvedEventValidationError{
					field:  "UserSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolResolvedEventValidationError{
				field:  "UserSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PoolResolvedEventMultiError(errors)
	}

	return nil
}

// PoolResolvedEventMultiError is an error wrapping multiple validation errors
// returned by PoolResolvedEvent.ValidateAll() if the designated constraints
// aren't met.
type PoolResolvedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PoolResolvedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PoolResolvedEventMultiError) AllErrors() []error { return m }

// PoolResolvedEventValidationError is the validation error returned by
// PoolResolvedEvent.Validate if the designated constraints aren't met.
type PoolResolvedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoolResolvedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoolResolvedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoolResolvedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoolResolvedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoolResolvedEventValidationError) ErrorName() string {
	return "PoolResolvedEventValidationError"
}

// Error satisfies the builtin error interface
func (e PoolResolvedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoolResolvedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoolResolvedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoolResolvedEventValidationError{}

// Validate checks the field values on PoolBetUpdateEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PoolBetUpdateEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PoolBetUpdateEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PoolBetUpdateEventMultiError, or nil if none found.
func (m *PoolBetUpdateEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *PoolBetUpdateEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPoolId() == nil {
		err := PoolBetUpdateEventValidationError{
			field:  "PoolId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPoolId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolBetUpdateEventValidationError{
					field:  "PoolId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolBetUpdateEventValidationError{
					field:  "PoolId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoolId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolBetUpdateEventValidationError{
				field:  "PoolId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetBetSummary() == nil {
		err := PoolBetUpdateEventValidationError{
			field:  "BetSummary",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolBetUpdateEventValidationError{
					field:  "BetSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolBetUpdateEventValidationError{
					field:  "BetSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolBetUpdateEventValidationError{
				field:  "BetSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PoolBetUpdateEventMultiError(errors)
	}

	return nil
}

// PoolBetUpdateEventMultiError is an error wrapping multiple validation errors
// returned by PoolBetUpdateEvent.ValidateAll() if the designated constraints
// aren't met.
type PoolBetUpdateEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PoolBetUpdateEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PoolBetUpdateEventMultiError) AllErrors() []error { return m }

// PoolBetUpdateEventValidationError is the validation error returned by
// PoolBetUpdateEvent.Validate if the designated constraints aren't met.
type PoolBetUpdateEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoolBetUpdateEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoolBetUpdateEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoolBetUpdateEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoolBetUpdateEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoolBetUpdateEventValidationError) ErrorName() string {
	return "PoolBetUpdateEventValidationError"
}

// Error satisfies the builtin error interface
func (e PoolBetUpdateEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoolBetUpdateEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoolBetUpdateEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoolBetUpdateEventValidationError{}

// Validate checks the field values on ServerPing with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerPing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerPing with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerPingMultiError, or
// nil if none found.
func (m *ServerPing) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerPing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimestamp() == nil {
		err := ServerPingValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPingDelay() == nil {
		err := ServerPingValidationError{
			field:  "PingDelay",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerPingMultiError(errors)
	}

	return nil
}

// ServerPingMultiError is an error wrapping multiple validation errors
// returned by ServerPing.ValidateAll() if the designated constraints aren't met.
type ServerPingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerPingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerPingMultiError) AllErrors() []error { return m }

// ServerPingValidationError is the validation error returned by
// ServerPing.Validate if the designated constraints aren't met.
type ServerPingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerPingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerPingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerPingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerPingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerPingValidationError) ErrorName() string { return "ServerPingValidationError" }

// Error satisfies the builtin error interface
func (e ServerPingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerPingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerPingValidationError{}

// Validate checks the field values on ClientPong with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientPong) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientPong with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientPongMultiError, or
// nil if none found.
func (m *ClientPong) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientPong) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimestamp() == nil {
		err := ClientPongValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClientPongMultiError(errors)
	}

	return nil
}

// ClientPongMultiError is an error wrapping multiple validation errors
// returned by ClientPong.ValidateAll() if the designated constraints aren't met.
type ClientPongMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientPongMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientPongMultiError) AllErrors() []error { return m }

// ClientPongValidationError is the validation error returned by
// ClientPong.Validate if the designated constraints aren't met.
type ClientPongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientPongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientPongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientPongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientPongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientPongValidationError) ErrorName() string { return "ClientPongValidationError" }

// Error satisfies the builtin error interface
func (e ClientPongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientPong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientPongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientPongValidationError{}
