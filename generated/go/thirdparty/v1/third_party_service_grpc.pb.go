// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: thirdparty/v1/third_party_service.proto

package thirdpartypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThirdParty_GetJwt_FullMethodName = "/flipcash.thirdparty.v1.ThirdParty/GetJwt"
)

// ThirdPartyClient is the client API for ThirdParty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThirdPartyClient interface {
	// GetJwt gets a JWT for auth against a third part
	GetJwt(ctx context.Context, in *GetJwtRequest, opts ...grpc.CallOption) (*GetJwtResponse, error)
}

type thirdPartyClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdPartyClient(cc grpc.ClientConnInterface) ThirdPartyClient {
	return &thirdPartyClient{cc}
}

func (c *thirdPartyClient) GetJwt(ctx context.Context, in *GetJwtRequest, opts ...grpc.CallOption) (*GetJwtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJwtResponse)
	err := c.cc.Invoke(ctx, ThirdParty_GetJwt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdPartyServer is the server API for ThirdParty service.
// All implementations must embed UnimplementedThirdPartyServer
// for forward compatibility.
type ThirdPartyServer interface {
	// GetJwt gets a JWT for auth against a third part
	GetJwt(context.Context, *GetJwtRequest) (*GetJwtResponse, error)
	mustEmbedUnimplementedThirdPartyServer()
}

// UnimplementedThirdPartyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThirdPartyServer struct{}

func (UnimplementedThirdPartyServer) GetJwt(context.Context, *GetJwtRequest) (*GetJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwt not implemented")
}
func (UnimplementedThirdPartyServer) mustEmbedUnimplementedThirdPartyServer() {}
func (UnimplementedThirdPartyServer) testEmbeddedByValue()                    {}

// UnsafeThirdPartyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdPartyServer will
// result in compilation errors.
type UnsafeThirdPartyServer interface {
	mustEmbedUnimplementedThirdPartyServer()
}

func RegisterThirdPartyServer(s grpc.ServiceRegistrar, srv ThirdPartyServer) {
	// If the following call pancis, it indicates UnimplementedThirdPartyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThirdParty_ServiceDesc, srv)
}

func _ThirdParty_GetJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).GetJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdParty_GetJwt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).GetJwt(ctx, req.(*GetJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThirdParty_ServiceDesc is the grpc.ServiceDesc for ThirdParty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThirdParty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flipcash.thirdparty.v1.ThirdParty",
	HandlerType: (*ThirdPartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJwt",
			Handler:    _ThirdParty_GetJwt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thirdparty/v1/third_party_service.proto",
}
