// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: account/v1/flipcash_account_service.proto

package acountpb

import (
	v1 "github.com/code-payments/flipcash-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterResponse_Result int32

const (
	RegisterResponse_OK                RegisterResponse_Result = 0
	RegisterResponse_INVALID_SIGNATURE RegisterResponse_Result = 1
	RegisterResponse_DENIED            RegisterResponse_Result = 2
)

// Enum value maps for RegisterResponse_Result.
var (
	RegisterResponse_Result_name = map[int32]string{
		0: "OK",
		1: "INVALID_SIGNATURE",
		2: "DENIED",
	}
	RegisterResponse_Result_value = map[string]int32{
		"OK":                0,
		"INVALID_SIGNATURE": 1,
		"DENIED":            2,
	}
)

func (x RegisterResponse_Result) Enum() *RegisterResponse_Result {
	p := new(RegisterResponse_Result)
	*p = x
	return p
}

func (x RegisterResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_account_v1_flipcash_account_service_proto_enumTypes[0].Descriptor()
}

func (RegisterResponse_Result) Type() protoreflect.EnumType {
	return &file_account_v1_flipcash_account_service_proto_enumTypes[0]
}

func (x RegisterResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterResponse_Result.Descriptor instead.
func (RegisterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_account_v1_flipcash_account_service_proto_rawDescGZIP(), []int{1, 0}
}

type LoginResponse_Result int32

const (
	LoginResponse_OK                LoginResponse_Result = 0
	LoginResponse_INVALID_TIMESTAMP LoginResponse_Result = 1
	LoginResponse_DENIED            LoginResponse_Result = 2
)

// Enum value maps for LoginResponse_Result.
var (
	LoginResponse_Result_name = map[int32]string{
		0: "OK",
		1: "INVALID_TIMESTAMP",
		2: "DENIED",
	}
	LoginResponse_Result_value = map[string]int32{
		"OK":                0,
		"INVALID_TIMESTAMP": 1,
		"DENIED":            2,
	}
)

func (x LoginResponse_Result) Enum() *LoginResponse_Result {
	p := new(LoginResponse_Result)
	*p = x
	return p
}

func (x LoginResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_account_v1_flipcash_account_service_proto_enumTypes[1].Descriptor()
}

func (LoginResponse_Result) Type() protoreflect.EnumType {
	return &file_account_v1_flipcash_account_service_proto_enumTypes[1]
}

func (x LoginResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginResponse_Result.Descriptor instead.
func (LoginResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_account_v1_flipcash_account_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetUserFlagsResponse_Result int32

const (
	GetUserFlagsResponse_OK     GetUserFlagsResponse_Result = 0
	GetUserFlagsResponse_DENIED GetUserFlagsResponse_Result = 1
)

// Enum value maps for GetUserFlagsResponse_Result.
var (
	GetUserFlagsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	GetUserFlagsResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x GetUserFlagsResponse_Result) Enum() *GetUserFlagsResponse_Result {
	p := new(GetUserFlagsResponse_Result)
	*p = x
	return p
}

func (x GetUserFlagsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserFlagsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_account_v1_flipcash_account_service_proto_enumTypes[2].Descriptor()
}

func (GetUserFlagsResponse_Result) Type() protoreflect.EnumType {
	return &file_account_v1_flipcash_account_service_proto_enumTypes[2]
}

func (x GetUserFlagsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserFlagsResponse_Result.Descriptor instead.
func (GetUserFlagsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_account_v1_flipcash_account_service_proto_rawDescGZIP(), []int{5, 0}
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PublicKey the public key that is authorized to perform actions on the
	// registered users behalf.
	PublicKey *v1.PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Signature of this message (without the signature), using the provided keypair.
	Signature *v1.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_flipcash_account_service_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetPublicKey() *v1.PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *RegisterRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result RegisterResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipcash.account.v1.RegisterResponse_Result" json:"result,omitempty"`
	// The UserId associated with the account.
	UserId *v1.UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_account_v1_flipcash_account_service_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetResult() RegisterResponse_Result {
	if x != nil {
		return x.Result
	}
	return RegisterResponse_OK
}

func (x *RegisterResponse) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp is the timestamp the request was generated
	//
	// The server may reject the request if the timestamp is too far off
	// the current (server) time. This is to prevent replay attacks.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Auth      *v1.Auth               `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_flipcash_account_service_proto_rawDescGZIP(), []int{2}
}

func (x *LoginRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LoginRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result LoginResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipcash.account.v1.LoginResponse_Result" json:"result,omitempty"`
	UserId *v1.UserId           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_account_v1_flipcash_account_service_proto_rawDescGZIP(), []int{3}
}

func (x *LoginResponse) GetResult() LoginResponse_Result {
	if x != nil {
		return x.Result
	}
	return LoginResponse_OK
}

func (x *LoginResponse) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

type GetUserFlagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *v1.UserId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Auth   *v1.Auth   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetUserFlagsRequest) Reset() {
	*x = GetUserFlagsRequest{}
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFlagsRequest) ProtoMessage() {}

func (x *GetUserFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFlagsRequest.ProtoReflect.Descriptor instead.
func (*GetUserFlagsRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_flipcash_account_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserFlagsRequest) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *GetUserFlagsRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type GetUserFlagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    GetUserFlagsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipcash.account.v1.GetUserFlagsResponse_Result" json:"result,omitempty"`
	UserFlags *UserFlags                  `protobuf:"bytes,2,opt,name=user_flags,json=userFlags,proto3" json:"user_flags,omitempty"`
}

func (x *GetUserFlagsResponse) Reset() {
	*x = GetUserFlagsResponse{}
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFlagsResponse) ProtoMessage() {}

func (x *GetUserFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFlagsResponse.ProtoReflect.Descriptor instead.
func (*GetUserFlagsResponse) Descriptor() ([]byte, []int) {
	return file_account_v1_flipcash_account_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserFlagsResponse) GetResult() GetUserFlagsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetUserFlagsResponse_OK
}

func (x *GetUserFlagsResponse) GetUserFlags() *UserFlags {
	if x != nil {
		return x.UserFlags
	}
	return nil
}

type UserFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is this a fully registered account using IAP for account creation?
	IsRegisteredAccount bool `protobuf:"varint,1,opt,name=is_registered_account,json=isRegisteredAccount,proto3" json:"is_registered_account,omitempty"`
	// Is this user associated with a Flipcash staff member?
	IsStaff bool `protobuf:"varint,2,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
}

func (x *UserFlags) Reset() {
	*x = UserFlags{}
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFlags) ProtoMessage() {}

func (x *UserFlags) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_flipcash_account_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFlags.ProtoReflect.Descriptor instead.
func (*UserFlags) Descriptor() ([]byte, []int) {
	return file_account_v1_flipcash_account_service_proto_rawDescGZIP(), []int{6}
}

func (x *UserFlags) GetIsRegisteredAccount() bool {
	if x != nil {
		return x.IsRegisteredAccount
	}
	return false
}

func (x *UserFlags) GetIsStaff() bool {
	if x != nil {
		return x.IsStaff
	}
	return false
}

var File_account_v1_flipcash_account_service_proto protoreflect.FileDescriptor

var file_account_v1_flipcash_account_service_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x45,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x33, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xbc, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x33, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xbd, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0x5a, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x32, 0x97, 0x02, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a,
	0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73,
	0x68, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x85, 0x01, 0x0a, 0x23,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x70, 0x62, 0xa2, 0x02, 0x0c, 0x46, 0x50, 0x42, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_account_v1_flipcash_account_service_proto_rawDescOnce sync.Once
	file_account_v1_flipcash_account_service_proto_rawDescData = file_account_v1_flipcash_account_service_proto_rawDesc
)

func file_account_v1_flipcash_account_service_proto_rawDescGZIP() []byte {
	file_account_v1_flipcash_account_service_proto_rawDescOnce.Do(func() {
		file_account_v1_flipcash_account_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_v1_flipcash_account_service_proto_rawDescData)
	})
	return file_account_v1_flipcash_account_service_proto_rawDescData
}

var file_account_v1_flipcash_account_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_account_v1_flipcash_account_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_account_v1_flipcash_account_service_proto_goTypes = []any{
	(RegisterResponse_Result)(0),     // 0: flipcash.account.v1.RegisterResponse.Result
	(LoginResponse_Result)(0),        // 1: flipcash.account.v1.LoginResponse.Result
	(GetUserFlagsResponse_Result)(0), // 2: flipcash.account.v1.GetUserFlagsResponse.Result
	(*RegisterRequest)(nil),          // 3: flipcash.account.v1.RegisterRequest
	(*RegisterResponse)(nil),         // 4: flipcash.account.v1.RegisterResponse
	(*LoginRequest)(nil),             // 5: flipcash.account.v1.LoginRequest
	(*LoginResponse)(nil),            // 6: flipcash.account.v1.LoginResponse
	(*GetUserFlagsRequest)(nil),      // 7: flipcash.account.v1.GetUserFlagsRequest
	(*GetUserFlagsResponse)(nil),     // 8: flipcash.account.v1.GetUserFlagsResponse
	(*UserFlags)(nil),                // 9: flipcash.account.v1.UserFlags
	(*v1.PublicKey)(nil),             // 10: flipcash.common.v1.PublicKey
	(*v1.Signature)(nil),             // 11: flipcash.common.v1.Signature
	(*v1.UserId)(nil),                // 12: flipcash.common.v1.UserId
	(*timestamppb.Timestamp)(nil),    // 13: google.protobuf.Timestamp
	(*v1.Auth)(nil),                  // 14: flipcash.common.v1.Auth
}
var file_account_v1_flipcash_account_service_proto_depIdxs = []int32{
	10, // 0: flipcash.account.v1.RegisterRequest.public_key:type_name -> flipcash.common.v1.PublicKey
	11, // 1: flipcash.account.v1.RegisterRequest.signature:type_name -> flipcash.common.v1.Signature
	0,  // 2: flipcash.account.v1.RegisterResponse.result:type_name -> flipcash.account.v1.RegisterResponse.Result
	12, // 3: flipcash.account.v1.RegisterResponse.user_id:type_name -> flipcash.common.v1.UserId
	13, // 4: flipcash.account.v1.LoginRequest.timestamp:type_name -> google.protobuf.Timestamp
	14, // 5: flipcash.account.v1.LoginRequest.auth:type_name -> flipcash.common.v1.Auth
	1,  // 6: flipcash.account.v1.LoginResponse.result:type_name -> flipcash.account.v1.LoginResponse.Result
	12, // 7: flipcash.account.v1.LoginResponse.user_id:type_name -> flipcash.common.v1.UserId
	12, // 8: flipcash.account.v1.GetUserFlagsRequest.user_id:type_name -> flipcash.common.v1.UserId
	14, // 9: flipcash.account.v1.GetUserFlagsRequest.auth:type_name -> flipcash.common.v1.Auth
	2,  // 10: flipcash.account.v1.GetUserFlagsResponse.result:type_name -> flipcash.account.v1.GetUserFlagsResponse.Result
	9,  // 11: flipcash.account.v1.GetUserFlagsResponse.user_flags:type_name -> flipcash.account.v1.UserFlags
	3,  // 12: flipcash.account.v1.Account.Register:input_type -> flipcash.account.v1.RegisterRequest
	5,  // 13: flipcash.account.v1.Account.Login:input_type -> flipcash.account.v1.LoginRequest
	7,  // 14: flipcash.account.v1.Account.GetUserFlags:input_type -> flipcash.account.v1.GetUserFlagsRequest
	4,  // 15: flipcash.account.v1.Account.Register:output_type -> flipcash.account.v1.RegisterResponse
	6,  // 16: flipcash.account.v1.Account.Login:output_type -> flipcash.account.v1.LoginResponse
	8,  // 17: flipcash.account.v1.Account.GetUserFlags:output_type -> flipcash.account.v1.GetUserFlagsResponse
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_account_v1_flipcash_account_service_proto_init() }
func file_account_v1_flipcash_account_service_proto_init() {
	if File_account_v1_flipcash_account_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_v1_flipcash_account_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_account_v1_flipcash_account_service_proto_goTypes,
		DependencyIndexes: file_account_v1_flipcash_account_service_proto_depIdxs,
		EnumInfos:         file_account_v1_flipcash_account_service_proto_enumTypes,
		MessageInfos:      file_account_v1_flipcash_account_service_proto_msgTypes,
	}.Build()
	File_account_v1_flipcash_account_service_proto = out.File
	file_account_v1_flipcash_account_service_proto_rawDesc = nil
	file_account_v1_flipcash_account_service_proto_goTypes = nil
	file_account_v1_flipcash_account_service_proto_depIdxs = nil
}
