// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pool/v1/model.proto

package poolpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PoolId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PoolId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PoolId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PoolIdMultiError, or nil if none found.
func (m *PoolId) ValidateAll() error {
	return m.validate(true)
}

func (m *PoolId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := PoolIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PoolIdMultiError(errors)
	}

	return nil
}

// PoolIdMultiError is an error wrapping multiple validation errors returned by
// PoolId.ValidateAll() if the designated constraints aren't met.
type PoolIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PoolIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PoolIdMultiError) AllErrors() []error { return m }

// PoolIdValidationError is the validation error returned by PoolId.Validate if
// the designated constraints aren't met.
type PoolIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoolIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoolIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoolIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoolIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoolIdValidationError) ErrorName() string { return "PoolIdValidationError" }

// Error satisfies the builtin error interface
func (e PoolIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoolId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoolIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoolIdValidationError{}

// Validate checks the field values on Resolution with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resolution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resolution with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResolutionMultiError, or
// nil if none found.
func (m *Resolution) ValidateAll() error {
	return m.validate(true)
}

func (m *Resolution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofKindPresent := false
	switch v := m.Kind.(type) {
	case *Resolution_BooleanResolution:
		if v == nil {
			err := ResolutionValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true
		// no validation rules for BooleanResolution
	case *Resolution_RefundResolution:
		if v == nil {
			err := ResolutionValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetRefundResolution()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResolutionValidationError{
						field:  "RefundResolution",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResolutionValidationError{
						field:  "RefundResolution",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRefundResolution()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResolutionValidationError{
					field:  "RefundResolution",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofKindPresent {
		err := ResolutionValidationError{
			field:  "Kind",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResolutionMultiError(errors)
	}

	return nil
}

// ResolutionMultiError is an error wrapping multiple validation errors
// returned by Resolution.ValidateAll() if the designated constraints aren't met.
type ResolutionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolutionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolutionMultiError) AllErrors() []error { return m }

// ResolutionValidationError is the validation error returned by
// Resolution.Validate if the designated constraints aren't met.
type ResolutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolutionValidationError) ErrorName() string { return "ResolutionValidationError" }

// Error satisfies the builtin error interface
func (e ResolutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolutionValidationError{}

// Validate checks the field values on SignedPoolMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignedPoolMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignedPoolMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignedPoolMetadataMultiError, or nil if none found.
func (m *SignedPoolMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SignedPoolMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := SignedPoolMetadataValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignedPoolMetadataValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCreator() == nil {
		err := SignedPoolMetadataValidationError{
			field:  "Creator",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignedPoolMetadataValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 256 {
		err := SignedPoolMetadataValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBuyIn() == nil {
		err := SignedPoolMetadataValidationError{
			field:  "BuyIn",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBuyIn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "BuyIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "BuyIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBuyIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignedPoolMetadataValidationError{
				field:  "BuyIn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetFundingDestination() == nil {
		err := SignedPoolMetadataValidationError{
			field:  "FundingDestination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFundingDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "FundingDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "FundingDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFundingDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignedPoolMetadataValidationError{
				field:  "FundingDestination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsOpen

	if all {
		switch v := interface{}(m.GetResolution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "Resolution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "Resolution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResolution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignedPoolMetadataValidationError{
				field:  "Resolution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCreatedAt() == nil {
		err := SignedPoolMetadataValidationError{
			field:  "CreatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetClosedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "ClosedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignedPoolMetadataValidationError{
					field:  "ClosedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClosedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignedPoolMetadataValidationError{
				field:  "ClosedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignedPoolMetadataMultiError(errors)
	}

	return nil
}

// SignedPoolMetadataMultiError is an error wrapping multiple validation errors
// returned by SignedPoolMetadata.ValidateAll() if the designated constraints
// aren't met.
type SignedPoolMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignedPoolMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignedPoolMetadataMultiError) AllErrors() []error { return m }

// SignedPoolMetadataValidationError is the validation error returned by
// SignedPoolMetadata.Validate if the designated constraints aren't met.
type SignedPoolMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignedPoolMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignedPoolMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignedPoolMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignedPoolMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignedPoolMetadataValidationError) ErrorName() string {
	return "SignedPoolMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SignedPoolMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignedPoolMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignedPoolMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignedPoolMetadataValidationError{}

// Validate checks the field values on PoolMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PoolMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PoolMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PoolMetadataMultiError, or
// nil if none found.
func (m *PoolMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *PoolMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVerifiedMetadata() == nil {
		err := PoolMetadataValidationError{
			field:  "VerifiedMetadata",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVerifiedMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "VerifiedMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "VerifiedMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVerifiedMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolMetadataValidationError{
				field:  "VerifiedMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRendezvousSignature() == nil {
		err := PoolMetadataValidationError{
			field:  "RendezvousSignature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRendezvousSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "RendezvousSignature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "RendezvousSignature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRendezvousSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolMetadataValidationError{
				field:  "RendezvousSignature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetBets()) > 1024 {
		err := PoolMetadataValidationError{
			field:  "Bets",
			reason: "value must contain no more than 1024 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PoolMetadataValidationError{
						field:  fmt.Sprintf("Bets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PoolMetadataValidationError{
						field:  fmt.Sprintf("Bets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PoolMetadataValidationError{
					field:  fmt.Sprintf("Bets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagingToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "PagingToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "PagingToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagingToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolMetadataValidationError{
				field:  "PagingToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PoolMetadataMultiError(errors)
	}

	return nil
}

// PoolMetadataMultiError is an error wrapping multiple validation errors
// returned by PoolMetadata.ValidateAll() if the designated constraints aren't met.
type PoolMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PoolMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PoolMetadataMultiError) AllErrors() []error { return m }

// PoolMetadataValidationError is the validation error returned by
// PoolMetadata.Validate if the designated constraints aren't met.
type PoolMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoolMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoolMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoolMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoolMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoolMetadataValidationError) ErrorName() string { return "PoolMetadataValidationError" }

// Error satisfies the builtin error interface
func (e PoolMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoolMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoolMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoolMetadataValidationError{}

// Validate checks the field values on BetId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BetId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BetId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BetIdMultiError, or nil if none found.
func (m *BetId) ValidateAll() error {
	return m.validate(true)
}

func (m *BetId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := BetIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BetIdMultiError(errors)
	}

	return nil
}

// BetIdMultiError is an error wrapping multiple validation errors returned by
// BetId.ValidateAll() if the designated constraints aren't met.
type BetIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BetIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BetIdMultiError) AllErrors() []error { return m }

// BetIdValidationError is the validation error returned by BetId.Validate if
// the designated constraints aren't met.
type BetIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BetIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BetIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BetIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BetIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BetIdValidationError) ErrorName() string { return "BetIdValidationError" }

// Error satisfies the builtin error interface
func (e BetIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBetId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BetIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BetIdValidationError{}

// Validate checks the field values on BetOutcome with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BetOutcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BetOutcome with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BetOutcomeMultiError, or
// nil if none found.
func (m *BetOutcome) ValidateAll() error {
	return m.validate(true)
}

func (m *BetOutcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofKindPresent := false
	switch v := m.Kind.(type) {
	case *BetOutcome_BooleanOutcome:
		if v == nil {
			err := BetOutcomeValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true
		// no validation rules for BooleanOutcome
	default:
		_ = v // ensures v is used
	}
	if !oneofKindPresent {
		err := BetOutcomeValidationError{
			field:  "Kind",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BetOutcomeMultiError(errors)
	}

	return nil
}

// BetOutcomeMultiError is an error wrapping multiple validation errors
// returned by BetOutcome.ValidateAll() if the designated constraints aren't met.
type BetOutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BetOutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BetOutcomeMultiError) AllErrors() []error { return m }

// BetOutcomeValidationError is the validation error returned by
// BetOutcome.Validate if the designated constraints aren't met.
type BetOutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BetOutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BetOutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BetOutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BetOutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BetOutcomeValidationError) ErrorName() string { return "BetOutcomeValidationError" }

// Error satisfies the builtin error interface
func (e BetOutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBetOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BetOutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BetOutcomeValidationError{}

// Validate checks the field values on SignedBetMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SignedBetMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignedBetMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignedBetMetadataMultiError, or nil if none found.
func (m *SignedBetMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SignedBetMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBetId() == nil {
		err := SignedBetMetadataValidationError{
			field:  "BetId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignedBetMetadataValidationError{
					field:  "BetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignedBetMetadataValidationError{
					field:  "BetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignedBetMetadataValidationError{
				field:  "BetId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() == nil {
		err := SignedBetMetadataValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignedBetMetadataValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignedBetMetadataValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignedBetMetadataValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSelectedOutcome() == nil {
		err := SignedBetMetadataValidationError{
			field:  "SelectedOutcome",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSelectedOutcome()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignedBetMetadataValidationError{
					field:  "SelectedOutcome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignedBetMetadataValidationError{
					field:  "SelectedOutcome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelectedOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignedBetMetadataValidationError{
				field:  "SelectedOutcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPayoutDestination() == nil {
		err := SignedBetMetadataValidationError{
			field:  "PayoutDestination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPayoutDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignedBetMetadataValidationError{
					field:  "PayoutDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignedBetMetadataValidationError{
					field:  "PayoutDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayoutDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignedBetMetadataValidationError{
				field:  "PayoutDestination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTs() == nil {
		err := SignedBetMetadataValidationError{
			field:  "Ts",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignedBetMetadataMultiError(errors)
	}

	return nil
}

// SignedBetMetadataMultiError is an error wrapping multiple validation errors
// returned by SignedBetMetadata.ValidateAll() if the designated constraints
// aren't met.
type SignedBetMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignedBetMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignedBetMetadataMultiError) AllErrors() []error { return m }

// SignedBetMetadataValidationError is the validation error returned by
// SignedBetMetadata.Validate if the designated constraints aren't met.
type SignedBetMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignedBetMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignedBetMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignedBetMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignedBetMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignedBetMetadataValidationError) ErrorName() string {
	return "SignedBetMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SignedBetMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignedBetMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignedBetMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignedBetMetadataValidationError{}

// Validate checks the field values on BetMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BetMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BetMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BetMetadataMultiError, or
// nil if none found.
func (m *BetMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *BetMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVerifiedMetadata() == nil {
		err := BetMetadataValidationError{
			field:  "VerifiedMetadata",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVerifiedMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "VerifiedMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "VerifiedMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVerifiedMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetMetadataValidationError{
				field:  "VerifiedMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRendezvousSignature() == nil {
		err := BetMetadataValidationError{
			field:  "RendezvousSignature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRendezvousSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "RendezvousSignature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "RendezvousSignature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRendezvousSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetMetadataValidationError{
				field:  "RendezvousSignature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BetMetadataMultiError(errors)
	}

	return nil
}

// BetMetadataMultiError is an error wrapping multiple validation errors
// returned by BetMetadata.ValidateAll() if the designated constraints aren't met.
type BetMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BetMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BetMetadataMultiError) AllErrors() []error { return m }

// BetMetadataValidationError is the validation error returned by
// BetMetadata.Validate if the designated constraints aren't met.
type BetMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BetMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BetMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BetMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BetMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BetMetadataValidationError) ErrorName() string { return "BetMetadataValidationError" }

// Error satisfies the builtin error interface
func (e BetMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBetMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BetMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BetMetadataValidationError{}

// Validate checks the field values on Resolution_Refund with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Resolution_Refund) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resolution_Refund with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Resolution_RefundMultiError, or nil if none found.
func (m *Resolution_Refund) ValidateAll() error {
	return m.validate(true)
}

func (m *Resolution_Refund) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Resolution_RefundMultiError(errors)
	}

	return nil
}

// Resolution_RefundMultiError is an error wrapping multiple validation errors
// returned by Resolution_Refund.ValidateAll() if the designated constraints
// aren't met.
type Resolution_RefundMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Resolution_RefundMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Resolution_RefundMultiError) AllErrors() []error { return m }

// Resolution_RefundValidationError is the validation error returned by
// Resolution_Refund.Validate if the designated constraints aren't met.
type Resolution_RefundValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Resolution_RefundValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Resolution_RefundValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Resolution_RefundValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Resolution_RefundValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Resolution_RefundValidationError) ErrorName() string {
	return "Resolution_RefundValidationError"
}

// Error satisfies the builtin error interface
func (e Resolution_RefundValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolution_Refund.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Resolution_RefundValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Resolution_RefundValidationError{}
