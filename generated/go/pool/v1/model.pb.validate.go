// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pool/v1/model.proto

package poolpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PoolId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PoolId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PoolId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PoolIdMultiError, or nil if none found.
func (m *PoolId) ValidateAll() error {
	return m.validate(true)
}

func (m *PoolId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := PoolIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PoolIdMultiError(errors)
	}

	return nil
}

// PoolIdMultiError is an error wrapping multiple validation errors returned by
// PoolId.ValidateAll() if the designated constraints aren't met.
type PoolIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PoolIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PoolIdMultiError) AllErrors() []error { return m }

// PoolIdValidationError is the validation error returned by PoolId.Validate if
// the designated constraints aren't met.
type PoolIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoolIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoolIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoolIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoolIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoolIdValidationError) ErrorName() string { return "PoolIdValidationError" }

// Error satisfies the builtin error interface
func (e PoolIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoolId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoolIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoolIdValidationError{}

// Validate checks the field values on PoolMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PoolMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PoolMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PoolMetadataMultiError, or
// nil if none found.
func (m *PoolMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *PoolMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := PoolMetadataValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolMetadataValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCreator() == nil {
		err := PoolMetadataValidationError{
			field:  "Creator",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolMetadataValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 256 {
		err := PoolMetadataValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBuyIn() == nil {
		err := PoolMetadataValidationError{
			field:  "BuyIn",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBuyIn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "BuyIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "BuyIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBuyIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolMetadataValidationError{
				field:  "BuyIn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetFundingDestination() == nil {
		err := PoolMetadataValidationError{
			field:  "FundingDestination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFundingDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "FundingDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "FundingDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFundingDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolMetadataValidationError{
				field:  "FundingDestination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsOpen

	if m.GetCreatedAt() == nil {
		err := PoolMetadataValidationError{
			field:  "CreatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRendezvousSignature() == nil {
		err := PoolMetadataValidationError{
			field:  "RendezvousSignature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRendezvousSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "RendezvousSignature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PoolMetadataValidationError{
					field:  "RendezvousSignature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRendezvousSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PoolMetadataValidationError{
				field:  "RendezvousSignature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetBets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PoolMetadataValidationError{
						field:  fmt.Sprintf("Bets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PoolMetadataValidationError{
						field:  fmt.Sprintf("Bets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PoolMetadataValidationError{
					field:  fmt.Sprintf("Bets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PoolMetadataMultiError(errors)
	}

	return nil
}

// PoolMetadataMultiError is an error wrapping multiple validation errors
// returned by PoolMetadata.ValidateAll() if the designated constraints aren't met.
type PoolMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PoolMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PoolMetadataMultiError) AllErrors() []error { return m }

// PoolMetadataValidationError is the validation error returned by
// PoolMetadata.Validate if the designated constraints aren't met.
type PoolMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoolMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoolMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoolMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoolMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoolMetadataValidationError) ErrorName() string { return "PoolMetadataValidationError" }

// Error satisfies the builtin error interface
func (e PoolMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoolMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoolMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoolMetadataValidationError{}

// Validate checks the field values on BetId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BetId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BetId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BetIdMultiError, or nil if none found.
func (m *BetId) ValidateAll() error {
	return m.validate(true)
}

func (m *BetId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := BetIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BetIdMultiError(errors)
	}

	return nil
}

// BetIdMultiError is an error wrapping multiple validation errors returned by
// BetId.ValidateAll() if the designated constraints aren't met.
type BetIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BetIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BetIdMultiError) AllErrors() []error { return m }

// BetIdValidationError is the validation error returned by BetId.Validate if
// the designated constraints aren't met.
type BetIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BetIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BetIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BetIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BetIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BetIdValidationError) ErrorName() string { return "BetIdValidationError" }

// Error satisfies the builtin error interface
func (e BetIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBetId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BetIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BetIdValidationError{}

// Validate checks the field values on BetMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BetMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BetMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BetMetadataMultiError, or
// nil if none found.
func (m *BetMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *BetMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBetId() == nil {
		err := BetMetadataValidationError{
			field:  "BetId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "BetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "BetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetMetadataValidationError{
				field:  "BetId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() == nil {
		err := BetMetadataValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetMetadataValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SelectedOutcome

	if m.GetPayoutDestination() == nil {
		err := BetMetadataValidationError{
			field:  "PayoutDestination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPayoutDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "PayoutDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "PayoutDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayoutDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetMetadataValidationError{
				field:  "PayoutDestination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTs() == nil {
		err := BetMetadataValidationError{
			field:  "Ts",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRendezvousSignature() == nil {
		err := BetMetadataValidationError{
			field:  "RendezvousSignature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRendezvousSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "RendezvousSignature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetMetadataValidationError{
					field:  "RendezvousSignature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRendezvousSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetMetadataValidationError{
				field:  "RendezvousSignature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BetMetadataMultiError(errors)
	}

	return nil
}

// BetMetadataMultiError is an error wrapping multiple validation errors
// returned by BetMetadata.ValidateAll() if the designated constraints aren't met.
type BetMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BetMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BetMetadataMultiError) AllErrors() []error { return m }

// BetMetadataValidationError is the validation error returned by
// BetMetadata.Validate if the designated constraints aren't met.
type BetMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BetMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BetMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BetMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BetMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BetMetadataValidationError) ErrorName() string { return "BetMetadataValidationError" }

// Error satisfies the builtin error interface
func (e BetMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBetMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BetMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BetMetadataValidationError{}
