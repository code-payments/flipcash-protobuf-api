// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: pool/v1/model.proto

package poolpb

import (
	v1 "github.com/code-payments/flipcash-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PoolId uniquely identifies a pool via a rendezvous public key
type PoolId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PoolId) Reset() {
	*x = PoolId{}
	mi := &file_pool_v1_model_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolId) ProtoMessage() {}

func (x *PoolId) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolId.ProtoReflect.Descriptor instead.
func (*PoolId) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *PoolId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Pool metadata
type PoolMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *PoolId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user ID that created this pool
	Creator *v1.UserId `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// The pool name, which should ask a yes/no question to bet against
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The buy in amount for a bet
	BuyIn *v1.FiatPaymentAmount `protobuf:"bytes,4,opt,name=buy_in,json=buyIn,proto3" json:"buy_in,omitempty"`
	// Destination where bet payments will be made to fund the pool
	FundingDestination *v1.PublicKey `protobuf:"bytes,5,opt,name=funding_destination,json=fundingDestination,proto3" json:"funding_destination,omitempty"`
	// Is the pool currently open to take bets?
	IsOpen bool `protobuf:"varint,6,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	// Timestamp pool was created at
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Signature of the PoolMetadata message with the rendezvous public key of the pool
	RendezvousSignature *v1.Signature `protobuf:"bytes,8,opt,name=rendezvous_signature,json=rendezvousSignature,proto3" json:"rendezvous_signature,omitempty"`
	// The set of bets (with verified payment) made against this pool
	Bets []*BetMetadata `protobuf:"bytes,9,rep,name=bets,proto3" json:"bets,omitempty"`
}

func (x *PoolMetadata) Reset() {
	*x = PoolMetadata{}
	mi := &file_pool_v1_model_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolMetadata) ProtoMessage() {}

func (x *PoolMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolMetadata.ProtoReflect.Descriptor instead.
func (*PoolMetadata) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{1}
}

func (x *PoolMetadata) GetId() *PoolId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PoolMetadata) GetCreator() *v1.UserId {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *PoolMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PoolMetadata) GetBuyIn() *v1.FiatPaymentAmount {
	if x != nil {
		return x.BuyIn
	}
	return nil
}

func (x *PoolMetadata) GetFundingDestination() *v1.PublicKey {
	if x != nil {
		return x.FundingDestination
	}
	return nil
}

func (x *PoolMetadata) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *PoolMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PoolMetadata) GetRendezvousSignature() *v1.Signature {
	if x != nil {
		return x.RendezvousSignature
	}
	return nil
}

func (x *PoolMetadata) GetBets() []*BetMetadata {
	if x != nil {
		return x.Bets
	}
	return nil
}

// BetId uniquely identifies a bet via an intent ID
type BetId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BetId) Reset() {
	*x = BetId{}
	mi := &file_pool_v1_model_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetId) ProtoMessage() {}

func (x *BetId) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetId.ProtoReflect.Descriptor instead.
func (*BetId) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{2}
}

func (x *BetId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Bet metadata
type BetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetId *BetId `protobuf:"bytes,1,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`
	// The user making the bet, which is unique for a given pool
	UserId *v1.UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The yes/no outcome the user has bet against
	SelectedOutcome bool `protobuf:"varint,3,opt,name=selected_outcome,json=selectedOutcome,proto3" json:"selected_outcome,omitempty"`
	// The destination where payout will be made if the user selected the correct
	// outcome.
	PayoutDestination *v1.PublicKey `protobuf:"bytes,4,opt,name=payout_destination,json=payoutDestination,proto3" json:"payout_destination,omitempty"`
	// Timestamp the bet was made
	Ts *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
	// Signature of the BetMetadata message with the rendezvous public key of the pool
	RendezvousSignature *v1.Signature `protobuf:"bytes,6,opt,name=rendezvous_signature,json=rendezvousSignature,proto3" json:"rendezvous_signature,omitempty"`
}

func (x *BetMetadata) Reset() {
	*x = BetMetadata{}
	mi := &file_pool_v1_model_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetMetadata) ProtoMessage() {}

func (x *BetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetMetadata.ProtoReflect.Descriptor instead.
func (*BetMetadata) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{3}
}

func (x *BetMetadata) GetBetId() *BetId {
	if x != nil {
		return x.BetId
	}
	return nil
}

func (x *BetMetadata) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *BetMetadata) GetSelectedOutcome() bool {
	if x != nil {
		return x.SelectedOutcome
	}
	return false
}

func (x *BetMetadata) GetPayoutDestination() *v1.PublicKey {
	if x != nil {
		return x.PayoutDestination
	}
	return nil
}

func (x *BetMetadata) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *BetMetadata) GetRendezvousSignature() *v1.Signature {
	if x != nil {
		return x.RendezvousSignature
	}
	return nil
}

var File_pool_v1_model_proto protoreflect.FileDescriptor

var file_pool_v1_model_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x06, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x20, 0x18, 0x20, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1, 0x04, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0x80, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x62, 0x75, 0x79,
	0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x61, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x62, 0x75, 0x79, 0x49,
	0x6e, 0x12, 0x58, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5a, 0x0a, 0x14, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x05, 0x42, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x20, 0x18, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x0b, 0x42, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f,
	0x75, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x7a, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62,
	0xa2, 0x02, 0x09, 0x46, 0x50, 0x42, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pool_v1_model_proto_rawDescOnce sync.Once
	file_pool_v1_model_proto_rawDescData = file_pool_v1_model_proto_rawDesc
)

func file_pool_v1_model_proto_rawDescGZIP() []byte {
	file_pool_v1_model_proto_rawDescOnce.Do(func() {
		file_pool_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_pool_v1_model_proto_rawDescData)
	})
	return file_pool_v1_model_proto_rawDescData
}

var file_pool_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pool_v1_model_proto_goTypes = []any{
	(*PoolId)(nil),                // 0: flipcash.pool.v1.PoolId
	(*PoolMetadata)(nil),          // 1: flipcash.pool.v1.PoolMetadata
	(*BetId)(nil),                 // 2: flipcash.pool.v1.BetId
	(*BetMetadata)(nil),           // 3: flipcash.pool.v1.BetMetadata
	(*v1.UserId)(nil),             // 4: flipcash.common.v1.UserId
	(*v1.FiatPaymentAmount)(nil),  // 5: flipcash.common.v1.FiatPaymentAmount
	(*v1.PublicKey)(nil),          // 6: flipcash.common.v1.PublicKey
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*v1.Signature)(nil),          // 8: flipcash.common.v1.Signature
}
var file_pool_v1_model_proto_depIdxs = []int32{
	0,  // 0: flipcash.pool.v1.PoolMetadata.id:type_name -> flipcash.pool.v1.PoolId
	4,  // 1: flipcash.pool.v1.PoolMetadata.creator:type_name -> flipcash.common.v1.UserId
	5,  // 2: flipcash.pool.v1.PoolMetadata.buy_in:type_name -> flipcash.common.v1.FiatPaymentAmount
	6,  // 3: flipcash.pool.v1.PoolMetadata.funding_destination:type_name -> flipcash.common.v1.PublicKey
	7,  // 4: flipcash.pool.v1.PoolMetadata.created_at:type_name -> google.protobuf.Timestamp
	8,  // 5: flipcash.pool.v1.PoolMetadata.rendezvous_signature:type_name -> flipcash.common.v1.Signature
	3,  // 6: flipcash.pool.v1.PoolMetadata.bets:type_name -> flipcash.pool.v1.BetMetadata
	2,  // 7: flipcash.pool.v1.BetMetadata.bet_id:type_name -> flipcash.pool.v1.BetId
	4,  // 8: flipcash.pool.v1.BetMetadata.user_id:type_name -> flipcash.common.v1.UserId
	6,  // 9: flipcash.pool.v1.BetMetadata.payout_destination:type_name -> flipcash.common.v1.PublicKey
	7,  // 10: flipcash.pool.v1.BetMetadata.ts:type_name -> google.protobuf.Timestamp
	8,  // 11: flipcash.pool.v1.BetMetadata.rendezvous_signature:type_name -> flipcash.common.v1.Signature
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pool_v1_model_proto_init() }
func file_pool_v1_model_proto_init() {
	if File_pool_v1_model_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pool_v1_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pool_v1_model_proto_goTypes,
		DependencyIndexes: file_pool_v1_model_proto_depIdxs,
		MessageInfos:      file_pool_v1_model_proto_msgTypes,
	}.Build()
	File_pool_v1_model_proto = out.File
	file_pool_v1_model_proto_rawDesc = nil
	file_pool_v1_model_proto_goTypes = nil
	file_pool_v1_model_proto_depIdxs = nil
}
