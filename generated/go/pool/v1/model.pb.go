// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: pool/v1/model.proto

package poolpb

import (
	v1 "github.com/code-payments/flipcash-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PoolId uniquely identifies a pool via a rendezvous public key
type PoolId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PoolId) Reset() {
	*x = PoolId{}
	mi := &file_pool_v1_model_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolId) ProtoMessage() {}

func (x *PoolId) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolId.ProtoReflect.Descriptor instead.
func (*PoolId) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *PoolId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Resolution is a resolution to a pool that declares the winning outcome chosen
// by the pool creator
type Resolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Resolution_BooleanResolution
	//	*Resolution_RefundResolution
	Kind isResolution_Kind `protobuf_oneof:"kind"`
}

func (x *Resolution) Reset() {
	*x = Resolution{}
	mi := &file_pool_v1_model_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolution) ProtoMessage() {}

func (x *Resolution) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolution.ProtoReflect.Descriptor instead.
func (*Resolution) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{1}
}

func (m *Resolution) GetKind() isResolution_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Resolution) GetBooleanResolution() bool {
	if x, ok := x.GetKind().(*Resolution_BooleanResolution); ok {
		return x.BooleanResolution
	}
	return false
}

func (x *Resolution) GetRefundResolution() *Resolution_Refund {
	if x, ok := x.GetKind().(*Resolution_RefundResolution); ok {
		return x.RefundResolution
	}
	return nil
}

type isResolution_Kind interface {
	isResolution_Kind()
}

type Resolution_BooleanResolution struct {
	// The yes/no outcome the creator has chosen as the winning outcome
	BooleanResolution bool `protobuf:"varint,1,opt,name=boolean_resolution,json=booleanResolution,proto3,oneof"`
}

type Resolution_RefundResolution struct {
	// A refund to all participants. No outcome was decided
	RefundResolution *Resolution_Refund `protobuf:"bytes,2,opt,name=refund_resolution,json=refundResolution,proto3,oneof"`
}

func (*Resolution_BooleanResolution) isResolution_Kind() {}

func (*Resolution_RefundResolution) isResolution_Kind() {}

// Pool metadata signed by the rendezvous key
type SignedPoolMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *PoolId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user ID that created this pool
	Creator *v1.UserId `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// The pool name, which should ask a yes/no question to bet against
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The buy in amount for a bet
	BuyIn *v1.FiatPaymentAmount `protobuf:"bytes,4,opt,name=buy_in,json=buyIn,proto3" json:"buy_in,omitempty"`
	// Destination where bet payments will be made to fund the pool
	FundingDestination *v1.PublicKey `protobuf:"bytes,5,opt,name=funding_destination,json=fundingDestination,proto3" json:"funding_destination,omitempty"`
	// Is the pool currently open to take bets?
	IsOpen bool `protobuf:"varint,6,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	// The pool resolution, if one is made
	Resolution *Resolution `protobuf:"bytes,7,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// Timestamp pool was created at
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp the pool was closed at
	ClosedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=closed_at,json=closedAt,proto3" json:"closed_at,omitempty"`
}

func (x *SignedPoolMetadata) Reset() {
	*x = SignedPoolMetadata{}
	mi := &file_pool_v1_model_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedPoolMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedPoolMetadata) ProtoMessage() {}

func (x *SignedPoolMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedPoolMetadata.ProtoReflect.Descriptor instead.
func (*SignedPoolMetadata) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{2}
}

func (x *SignedPoolMetadata) GetId() *PoolId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SignedPoolMetadata) GetCreator() *v1.UserId {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *SignedPoolMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SignedPoolMetadata) GetBuyIn() *v1.FiatPaymentAmount {
	if x != nil {
		return x.BuyIn
	}
	return nil
}

func (x *SignedPoolMetadata) GetFundingDestination() *v1.PublicKey {
	if x != nil {
		return x.FundingDestination
	}
	return nil
}

func (x *SignedPoolMetadata) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SignedPoolMetadata) GetResolution() *Resolution {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *SignedPoolMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SignedPoolMetadata) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

// Pool metadata
type PoolMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiedMetadata *SignedPoolMetadata `protobuf:"bytes,1,opt,name=verified_metadata,json=verifiedMetadata,proto3" json:"verified_metadata,omitempty"`
	// Signature of the SignedPoolMetadata message with the rendezvous public key of the pool
	RendezvousSignature *v1.Signature `protobuf:"bytes,2,opt,name=rendezvous_signature,json=rendezvousSignature,proto3" json:"rendezvous_signature,omitempty"`
	// The set of bets made against this pool
	Bets []*BetMetadata `protobuf:"bytes,3,rep,name=bets,proto3" json:"bets,omitempty"`
	// Consolidated summary of bets made against this pool
	BetSummary *BetSummary `protobuf:"bytes,7,opt,name=bet_summary,json=betSummary,proto3" json:"bet_summary,omitempty"`
	// Paging token specific to each user that enables access to paging APIs
	PagingToken *v1.PagingToken `protobuf:"bytes,4,opt,name=paging_token,json=pagingToken,proto3" json:"paging_token,omitempty"`
	// Has the funding destination been initialized? Bet payments cannot be made
	// until this has occurred.
	IsFundingDestinationInitialized bool `protobuf:"varint,5,opt,name=is_funding_destination_initialized,json=isFundingDestinationInitialized,proto3" json:"is_funding_destination_initialized,omitempty"`
	// Derivation index used to derive the pool account's authority. This is only
	// valid against authenticated RPCs made by the pool creator
	DerivationIndex uint64 `protobuf:"varint,6,opt,name=derivation_index,json=derivationIndex,proto3" json:"derivation_index,omitempty"`
}

func (x *PoolMetadata) Reset() {
	*x = PoolMetadata{}
	mi := &file_pool_v1_model_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolMetadata) ProtoMessage() {}

func (x *PoolMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolMetadata.ProtoReflect.Descriptor instead.
func (*PoolMetadata) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{3}
}

func (x *PoolMetadata) GetVerifiedMetadata() *SignedPoolMetadata {
	if x != nil {
		return x.VerifiedMetadata
	}
	return nil
}

func (x *PoolMetadata) GetRendezvousSignature() *v1.Signature {
	if x != nil {
		return x.RendezvousSignature
	}
	return nil
}

func (x *PoolMetadata) GetBets() []*BetMetadata {
	if x != nil {
		return x.Bets
	}
	return nil
}

func (x *PoolMetadata) GetBetSummary() *BetSummary {
	if x != nil {
		return x.BetSummary
	}
	return nil
}

func (x *PoolMetadata) GetPagingToken() *v1.PagingToken {
	if x != nil {
		return x.PagingToken
	}
	return nil
}

func (x *PoolMetadata) GetIsFundingDestinationInitialized() bool {
	if x != nil {
		return x.IsFundingDestinationInitialized
	}
	return false
}

func (x *PoolMetadata) GetDerivationIndex() uint64 {
	if x != nil {
		return x.DerivationIndex
	}
	return 0
}

// BetId uniquely identifies a bet via an intent ID
type BetId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BetId) Reset() {
	*x = BetId{}
	mi := &file_pool_v1_model_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetId) ProtoMessage() {}

func (x *BetId) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetId.ProtoReflect.Descriptor instead.
func (*BetId) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{4}
}

func (x *BetId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// BetOutcome is the user's outcome that they bet against
type BetOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*BetOutcome_BooleanOutcome
	Kind isBetOutcome_Kind `protobuf_oneof:"kind"`
}

func (x *BetOutcome) Reset() {
	*x = BetOutcome{}
	mi := &file_pool_v1_model_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetOutcome) ProtoMessage() {}

func (x *BetOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetOutcome.ProtoReflect.Descriptor instead.
func (*BetOutcome) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{5}
}

func (m *BetOutcome) GetKind() isBetOutcome_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *BetOutcome) GetBooleanOutcome() bool {
	if x, ok := x.GetKind().(*BetOutcome_BooleanOutcome); ok {
		return x.BooleanOutcome
	}
	return false
}

type isBetOutcome_Kind interface {
	isBetOutcome_Kind()
}

type BetOutcome_BooleanOutcome struct {
	// The yes/no outcome the user has bet against
	BooleanOutcome bool `protobuf:"varint,1,opt,name=boolean_outcome,json=booleanOutcome,proto3,oneof"`
}

func (*BetOutcome_BooleanOutcome) isBetOutcome_Kind() {}

// BetSummary contains a consolidated summary of bets made against a pool
type BetSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*BetSummary_BooleanSummary
	Kind isBetSummary_Kind `protobuf_oneof:"kind"`
}

func (x *BetSummary) Reset() {
	*x = BetSummary{}
	mi := &file_pool_v1_model_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSummary) ProtoMessage() {}

func (x *BetSummary) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSummary.ProtoReflect.Descriptor instead.
func (*BetSummary) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{6}
}

func (m *BetSummary) GetKind() isBetSummary_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *BetSummary) GetBooleanSummary() *BetSummary_BooleanBetSummary {
	if x, ok := x.GetKind().(*BetSummary_BooleanSummary); ok {
		return x.BooleanSummary
	}
	return nil
}

type isBetSummary_Kind interface {
	isBetSummary_Kind()
}

type BetSummary_BooleanSummary struct {
	// The yes/no outcome the user has bet against
	BooleanSummary *BetSummary_BooleanBetSummary `protobuf:"bytes,1,opt,name=boolean_summary,json=booleanSummary,proto3,oneof"`
}

func (*BetSummary_BooleanSummary) isBetSummary_Kind() {}

// Bet metadata signed by the rendezvous key
type SignedBetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetId *BetId `protobuf:"bytes,1,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`
	// The user making the bet, which is unique for a given pool
	UserId *v1.UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The outcome the user has bet against
	SelectedOutcome *BetOutcome `protobuf:"bytes,3,opt,name=selected_outcome,json=selectedOutcome,proto3" json:"selected_outcome,omitempty"`
	// The destination where payout will be made if the user selected the correct
	// outcome.
	PayoutDestination *v1.PublicKey `protobuf:"bytes,4,opt,name=payout_destination,json=payoutDestination,proto3" json:"payout_destination,omitempty"`
	// Timestamp the bet was made
	Ts *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *SignedBetMetadata) Reset() {
	*x = SignedBetMetadata{}
	mi := &file_pool_v1_model_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedBetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBetMetadata) ProtoMessage() {}

func (x *SignedBetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBetMetadata.ProtoReflect.Descriptor instead.
func (*SignedBetMetadata) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{7}
}

func (x *SignedBetMetadata) GetBetId() *BetId {
	if x != nil {
		return x.BetId
	}
	return nil
}

func (x *SignedBetMetadata) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *SignedBetMetadata) GetSelectedOutcome() *BetOutcome {
	if x != nil {
		return x.SelectedOutcome
	}
	return nil
}

func (x *SignedBetMetadata) GetPayoutDestination() *v1.PublicKey {
	if x != nil {
		return x.PayoutDestination
	}
	return nil
}

func (x *SignedBetMetadata) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

// Bet metadata
type BetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiedMetadata *SignedBetMetadata `protobuf:"bytes,1,opt,name=verified_metadata,json=verifiedMetadata,proto3" json:"verified_metadata,omitempty"`
	// Signature of the SignedBetMetadata message with the rendezvous public key of the pool
	RendezvousSignature *v1.Signature `protobuf:"bytes,2,opt,name=rendezvous_signature,json=rendezvousSignature,proto3" json:"rendezvous_signature,omitempty"`
	// Has the intent for bet payment been submitted?
	IsIntentSubmitted bool `protobuf:"varint,3,opt,name=is_intent_submitted,json=isIntentSubmitted,proto3" json:"is_intent_submitted,omitempty"`
}

func (x *BetMetadata) Reset() {
	*x = BetMetadata{}
	mi := &file_pool_v1_model_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetMetadata) ProtoMessage() {}

func (x *BetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetMetadata.ProtoReflect.Descriptor instead.
func (*BetMetadata) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{8}
}

func (x *BetMetadata) GetVerifiedMetadata() *SignedBetMetadata {
	if x != nil {
		return x.VerifiedMetadata
	}
	return nil
}

func (x *BetMetadata) GetRendezvousSignature() *v1.Signature {
	if x != nil {
		return x.RendezvousSignature
	}
	return nil
}

func (x *BetMetadata) GetIsIntentSubmitted() bool {
	if x != nil {
		return x.IsIntentSubmitted
	}
	return false
}

type Resolution_Refund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Resolution_Refund) Reset() {
	*x = Resolution_Refund{}
	mi := &file_pool_v1_model_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resolution_Refund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolution_Refund) ProtoMessage() {}

func (x *Resolution_Refund) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolution_Refund.ProtoReflect.Descriptor instead.
func (*Resolution_Refund) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{1, 0}
}

type BetSummary_BooleanBetSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumYes uint32 `protobuf:"varint,1,opt,name=num_yes,json=numYes,proto3" json:"num_yes,omitempty"`
	NumNo  uint32 `protobuf:"varint,2,opt,name=num_no,json=numNo,proto3" json:"num_no,omitempty"`
}

func (x *BetSummary_BooleanBetSummary) Reset() {
	*x = BetSummary_BooleanBetSummary{}
	mi := &file_pool_v1_model_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetSummary_BooleanBetSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSummary_BooleanBetSummary) ProtoMessage() {}

func (x *BetSummary_BooleanBetSummary) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_model_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSummary_BooleanBetSummary.ProtoReflect.Descriptor instead.
func (*BetSummary_BooleanBetSummary) Descriptor() ([]byte, []int) {
	return file_pool_v1_model_proto_rawDescGZIP(), []int{6, 0}
}

func (x *BetSummary_BooleanBetSummary) GetNumYes() uint32 {
	if x != nil {
		return x.NumYes
	}
	return 0
}

func (x *BetSummary_BooleanBetSummary) GetNumNo() uint32 {
	if x != nil {
		return x.NumNo
	}
	return 0
}

var File_pool_v1_model_proto protoreflect.FileDescriptor

var file_pool_v1_model_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x06, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x20, 0x18, 0x20, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x08, 0x0a, 0x06, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0x9f, 0x04, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0x80, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x62, 0x75,
	0x79, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x61, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x62, 0x75, 0x79,
	0x49, 0x6e, 0x12, 0x58, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x8a, 0x04, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x5b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x5a, 0x0a, 0x14, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f,
	0x75, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x62,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x92, 0x01, 0x03,
	0x10, 0x80, 0x08, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x62, 0x65, 0x74,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4b, 0x0a, 0x22, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x69, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x28,
	0x0a, 0x05, 0x42, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x20, 0x18,
	0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x42, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xb9,
	0x01, 0x0a, 0x0a, 0x42, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x59, 0x0a,
	0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73,
	0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x65, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x43, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x42, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x79, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x59, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x42, 0x0b, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xed, 0x02, 0x0a, 0x11, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x12,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x02, 0x74, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0b, 0x42,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x11, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x14, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a,
	0x76, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x42, 0x7a, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e,
	0x63, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6f, 0x6f, 0x6c,
	0x70, 0x62, 0xa2, 0x02, 0x09, 0x46, 0x50, 0x42, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pool_v1_model_proto_rawDescOnce sync.Once
	file_pool_v1_model_proto_rawDescData = file_pool_v1_model_proto_rawDesc
)

func file_pool_v1_model_proto_rawDescGZIP() []byte {
	file_pool_v1_model_proto_rawDescOnce.Do(func() {
		file_pool_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_pool_v1_model_proto_rawDescData)
	})
	return file_pool_v1_model_proto_rawDescData
}

var file_pool_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pool_v1_model_proto_goTypes = []any{
	(*PoolId)(nil),                       // 0: flipcash.pool.v1.PoolId
	(*Resolution)(nil),                   // 1: flipcash.pool.v1.Resolution
	(*SignedPoolMetadata)(nil),           // 2: flipcash.pool.v1.SignedPoolMetadata
	(*PoolMetadata)(nil),                 // 3: flipcash.pool.v1.PoolMetadata
	(*BetId)(nil),                        // 4: flipcash.pool.v1.BetId
	(*BetOutcome)(nil),                   // 5: flipcash.pool.v1.BetOutcome
	(*BetSummary)(nil),                   // 6: flipcash.pool.v1.BetSummary
	(*SignedBetMetadata)(nil),            // 7: flipcash.pool.v1.SignedBetMetadata
	(*BetMetadata)(nil),                  // 8: flipcash.pool.v1.BetMetadata
	(*Resolution_Refund)(nil),            // 9: flipcash.pool.v1.Resolution.Refund
	(*BetSummary_BooleanBetSummary)(nil), // 10: flipcash.pool.v1.BetSummary.BooleanBetSummary
	(*v1.UserId)(nil),                    // 11: flipcash.common.v1.UserId
	(*v1.FiatPaymentAmount)(nil),         // 12: flipcash.common.v1.FiatPaymentAmount
	(*v1.PublicKey)(nil),                 // 13: flipcash.common.v1.PublicKey
	(*timestamppb.Timestamp)(nil),        // 14: google.protobuf.Timestamp
	(*v1.Signature)(nil),                 // 15: flipcash.common.v1.Signature
	(*v1.PagingToken)(nil),               // 16: flipcash.common.v1.PagingToken
}
var file_pool_v1_model_proto_depIdxs = []int32{
	9,  // 0: flipcash.pool.v1.Resolution.refund_resolution:type_name -> flipcash.pool.v1.Resolution.Refund
	0,  // 1: flipcash.pool.v1.SignedPoolMetadata.id:type_name -> flipcash.pool.v1.PoolId
	11, // 2: flipcash.pool.v1.SignedPoolMetadata.creator:type_name -> flipcash.common.v1.UserId
	12, // 3: flipcash.pool.v1.SignedPoolMetadata.buy_in:type_name -> flipcash.common.v1.FiatPaymentAmount
	13, // 4: flipcash.pool.v1.SignedPoolMetadata.funding_destination:type_name -> flipcash.common.v1.PublicKey
	1,  // 5: flipcash.pool.v1.SignedPoolMetadata.resolution:type_name -> flipcash.pool.v1.Resolution
	14, // 6: flipcash.pool.v1.SignedPoolMetadata.created_at:type_name -> google.protobuf.Timestamp
	14, // 7: flipcash.pool.v1.SignedPoolMetadata.closed_at:type_name -> google.protobuf.Timestamp
	2,  // 8: flipcash.pool.v1.PoolMetadata.verified_metadata:type_name -> flipcash.pool.v1.SignedPoolMetadata
	15, // 9: flipcash.pool.v1.PoolMetadata.rendezvous_signature:type_name -> flipcash.common.v1.Signature
	8,  // 10: flipcash.pool.v1.PoolMetadata.bets:type_name -> flipcash.pool.v1.BetMetadata
	6,  // 11: flipcash.pool.v1.PoolMetadata.bet_summary:type_name -> flipcash.pool.v1.BetSummary
	16, // 12: flipcash.pool.v1.PoolMetadata.paging_token:type_name -> flipcash.common.v1.PagingToken
	10, // 13: flipcash.pool.v1.BetSummary.boolean_summary:type_name -> flipcash.pool.v1.BetSummary.BooleanBetSummary
	4,  // 14: flipcash.pool.v1.SignedBetMetadata.bet_id:type_name -> flipcash.pool.v1.BetId
	11, // 15: flipcash.pool.v1.SignedBetMetadata.user_id:type_name -> flipcash.common.v1.UserId
	5,  // 16: flipcash.pool.v1.SignedBetMetadata.selected_outcome:type_name -> flipcash.pool.v1.BetOutcome
	13, // 17: flipcash.pool.v1.SignedBetMetadata.payout_destination:type_name -> flipcash.common.v1.PublicKey
	14, // 18: flipcash.pool.v1.SignedBetMetadata.ts:type_name -> google.protobuf.Timestamp
	7,  // 19: flipcash.pool.v1.BetMetadata.verified_metadata:type_name -> flipcash.pool.v1.SignedBetMetadata
	15, // 20: flipcash.pool.v1.BetMetadata.rendezvous_signature:type_name -> flipcash.common.v1.Signature
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_pool_v1_model_proto_init() }
func file_pool_v1_model_proto_init() {
	if File_pool_v1_model_proto != nil {
		return
	}
	file_pool_v1_model_proto_msgTypes[1].OneofWrappers = []any{
		(*Resolution_BooleanResolution)(nil),
		(*Resolution_RefundResolution)(nil),
	}
	file_pool_v1_model_proto_msgTypes[5].OneofWrappers = []any{
		(*BetOutcome_BooleanOutcome)(nil),
	}
	file_pool_v1_model_proto_msgTypes[6].OneofWrappers = []any{
		(*BetSummary_BooleanSummary)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pool_v1_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pool_v1_model_proto_goTypes,
		DependencyIndexes: file_pool_v1_model_proto_depIdxs,
		MessageInfos:      file_pool_v1_model_proto_msgTypes,
	}.Build()
	File_pool_v1_model_proto = out.File
	file_pool_v1_model_proto_rawDesc = nil
	file_pool_v1_model_proto_goTypes = nil
	file_pool_v1_model_proto_depIdxs = nil
}
