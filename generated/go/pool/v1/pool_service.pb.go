// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: pool/v1/pool_service.proto

package poolpb

import (
	v1 "github.com/code-payments/flipcash-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreatePoolResponse_Result int32

const (
	CreatePoolResponse_OK                         CreatePoolResponse_Result = 0
	CreatePoolResponse_RENDEZVOUS_EXISTS          CreatePoolResponse_Result = 1
	CreatePoolResponse_FUNDING_DESTINATION_EXISTS CreatePoolResponse_Result = 2
	CreatePoolResponse_DENIED                     CreatePoolResponse_Result = 3
)

// Enum value maps for CreatePoolResponse_Result.
var (
	CreatePoolResponse_Result_name = map[int32]string{
		0: "OK",
		1: "RENDEZVOUS_EXISTS",
		2: "FUNDING_DESTINATION_EXISTS",
		3: "DENIED",
	}
	CreatePoolResponse_Result_value = map[string]int32{
		"OK":                         0,
		"RENDEZVOUS_EXISTS":          1,
		"FUNDING_DESTINATION_EXISTS": 2,
		"DENIED":                     3,
	}
)

func (x CreatePoolResponse_Result) Enum() *CreatePoolResponse_Result {
	p := new(CreatePoolResponse_Result)
	*p = x
	return p
}

func (x CreatePoolResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreatePoolResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_pool_v1_pool_service_proto_enumTypes[0].Descriptor()
}

func (CreatePoolResponse_Result) Type() protoreflect.EnumType {
	return &file_pool_v1_pool_service_proto_enumTypes[0]
}

func (x CreatePoolResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreatePoolResponse_Result.Descriptor instead.
func (CreatePoolResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{1, 0}
}

type GetPoolResponse_Result int32

const (
	GetPoolResponse_OK        GetPoolResponse_Result = 0
	GetPoolResponse_NOT_FOUND GetPoolResponse_Result = 1
)

// Enum value maps for GetPoolResponse_Result.
var (
	GetPoolResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetPoolResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetPoolResponse_Result) Enum() *GetPoolResponse_Result {
	p := new(GetPoolResponse_Result)
	*p = x
	return p
}

func (x GetPoolResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPoolResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_pool_v1_pool_service_proto_enumTypes[1].Descriptor()
}

func (GetPoolResponse_Result) Type() protoreflect.EnumType {
	return &file_pool_v1_pool_service_proto_enumTypes[1]
}

func (x GetPoolResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPoolResponse_Result.Descriptor instead.
func (GetPoolResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetPagedPoolsResponse_Result int32

const (
	GetPagedPoolsResponse_OK        GetPagedPoolsResponse_Result = 0
	GetPagedPoolsResponse_NOT_FOUND GetPagedPoolsResponse_Result = 1
)

// Enum value maps for GetPagedPoolsResponse_Result.
var (
	GetPagedPoolsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetPagedPoolsResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetPagedPoolsResponse_Result) Enum() *GetPagedPoolsResponse_Result {
	p := new(GetPagedPoolsResponse_Result)
	*p = x
	return p
}

func (x GetPagedPoolsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPagedPoolsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_pool_v1_pool_service_proto_enumTypes[2].Descriptor()
}

func (GetPagedPoolsResponse_Result) Type() protoreflect.EnumType {
	return &file_pool_v1_pool_service_proto_enumTypes[2]
}

func (x GetPagedPoolsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPagedPoolsResponse_Result.Descriptor instead.
func (GetPagedPoolsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{5, 0}
}

type ClosePoolResponse_Result int32

const (
	ClosePoolResponse_OK        ClosePoolResponse_Result = 0
	ClosePoolResponse_DENIED    ClosePoolResponse_Result = 1
	ClosePoolResponse_NOT_FOUND ClosePoolResponse_Result = 2
)

// Enum value maps for ClosePoolResponse_Result.
var (
	ClosePoolResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "NOT_FOUND",
	}
	ClosePoolResponse_Result_value = map[string]int32{
		"OK":        0,
		"DENIED":    1,
		"NOT_FOUND": 2,
	}
)

func (x ClosePoolResponse_Result) Enum() *ClosePoolResponse_Result {
	p := new(ClosePoolResponse_Result)
	*p = x
	return p
}

func (x ClosePoolResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClosePoolResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_pool_v1_pool_service_proto_enumTypes[3].Descriptor()
}

func (ClosePoolResponse_Result) Type() protoreflect.EnumType {
	return &file_pool_v1_pool_service_proto_enumTypes[3]
}

func (x ClosePoolResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClosePoolResponse_Result.Descriptor instead.
func (ClosePoolResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{7, 0}
}

type ResolvePoolResponse_Result int32

const (
	ResolvePoolResponse_OK                         ResolvePoolResponse_Result = 0
	ResolvePoolResponse_DENIED                     ResolvePoolResponse_Result = 1
	ResolvePoolResponse_NOT_FOUND                  ResolvePoolResponse_Result = 2
	ResolvePoolResponse_DIFFERENT_OUTCOME_DECLARED ResolvePoolResponse_Result = 3
	ResolvePoolResponse_POOL_OPEN                  ResolvePoolResponse_Result = 4
)

// Enum value maps for ResolvePoolResponse_Result.
var (
	ResolvePoolResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "NOT_FOUND",
		3: "DIFFERENT_OUTCOME_DECLARED",
		4: "POOL_OPEN",
	}
	ResolvePoolResponse_Result_value = map[string]int32{
		"OK":                         0,
		"DENIED":                     1,
		"NOT_FOUND":                  2,
		"DIFFERENT_OUTCOME_DECLARED": 3,
		"POOL_OPEN":                  4,
	}
)

func (x ResolvePoolResponse_Result) Enum() *ResolvePoolResponse_Result {
	p := new(ResolvePoolResponse_Result)
	*p = x
	return p
}

func (x ResolvePoolResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolvePoolResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_pool_v1_pool_service_proto_enumTypes[4].Descriptor()
}

func (ResolvePoolResponse_Result) Type() protoreflect.EnumType {
	return &file_pool_v1_pool_service_proto_enumTypes[4]
}

func (x ResolvePoolResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolvePoolResponse_Result.Descriptor instead.
func (ResolvePoolResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{9, 0}
}

type MakeBetResponse_Result int32

const (
	MakeBetResponse_OK                     MakeBetResponse_Result = 0
	MakeBetResponse_POOL_NOT_FOUND         MakeBetResponse_Result = 1
	MakeBetResponse_POOL_CLOSED            MakeBetResponse_Result = 2
	MakeBetResponse_MULTIPLE_BETS          MakeBetResponse_Result = 3
	MakeBetResponse_MAX_BETS_RECEIVED      MakeBetResponse_Result = 4
	MakeBetResponse_BET_OUTCOME_SOLIDIFIED MakeBetResponse_Result = 5
)

// Enum value maps for MakeBetResponse_Result.
var (
	MakeBetResponse_Result_name = map[int32]string{
		0: "OK",
		1: "POOL_NOT_FOUND",
		2: "POOL_CLOSED",
		3: "MULTIPLE_BETS",
		4: "MAX_BETS_RECEIVED",
		5: "BET_OUTCOME_SOLIDIFIED",
	}
	MakeBetResponse_Result_value = map[string]int32{
		"OK":                     0,
		"POOL_NOT_FOUND":         1,
		"POOL_CLOSED":            2,
		"MULTIPLE_BETS":          3,
		"MAX_BETS_RECEIVED":      4,
		"BET_OUTCOME_SOLIDIFIED": 5,
	}
)

func (x MakeBetResponse_Result) Enum() *MakeBetResponse_Result {
	p := new(MakeBetResponse_Result)
	*p = x
	return p
}

func (x MakeBetResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MakeBetResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_pool_v1_pool_service_proto_enumTypes[5].Descriptor()
}

func (MakeBetResponse_Result) Type() protoreflect.EnumType {
	return &file_pool_v1_pool_service_proto_enumTypes[5]
}

func (x MakeBetResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MakeBetResponse_Result.Descriptor instead.
func (MakeBetResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{11, 0}
}

type CreatePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool                *SignedPoolMetadata `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	RendezvousSignature *v1.Signature       `protobuf:"bytes,2,opt,name=rendezvous_signature,json=rendezvousSignature,proto3" json:"rendezvous_signature,omitempty"`
	Auth                *v1.Auth            `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *CreatePoolRequest) Reset() {
	*x = CreatePoolRequest{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolRequest) ProtoMessage() {}

func (x *CreatePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePoolRequest.ProtoReflect.Descriptor instead.
func (*CreatePoolRequest) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePoolRequest) GetPool() *SignedPoolMetadata {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *CreatePoolRequest) GetRendezvousSignature() *v1.Signature {
	if x != nil {
		return x.RendezvousSignature
	}
	return nil
}

func (x *CreatePoolRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type CreatePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result CreatePoolResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipcash.pool.v1.CreatePoolResponse_Result" json:"result,omitempty"`
}

func (x *CreatePoolResponse) Reset() {
	*x = CreatePoolResponse{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolResponse) ProtoMessage() {}

func (x *CreatePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePoolResponse.ProtoReflect.Descriptor instead.
func (*CreatePoolResponse) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePoolResponse) GetResult() CreatePoolResponse_Result {
	if x != nil {
		return x.Result
	}
	return CreatePoolResponse_OK
}

type GetPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *PoolId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExcludeBets bool    `protobuf:"varint,2,opt,name=exclude_bets,json=excludeBets,proto3" json:"exclude_bets,omitempty"`
}

func (x *GetPoolRequest) Reset() {
	*x = GetPoolRequest{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolRequest) ProtoMessage() {}

func (x *GetPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoolRequest.ProtoReflect.Descriptor instead.
func (*GetPoolRequest) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetPoolRequest) GetId() *PoolId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetPoolRequest) GetExcludeBets() bool {
	if x != nil {
		return x.ExcludeBets
	}
	return false
}

type GetPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetPoolResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipcash.pool.v1.GetPoolResponse_Result" json:"result,omitempty"`
	Pool   *PoolMetadata          `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *GetPoolResponse) Reset() {
	*x = GetPoolResponse{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolResponse) ProtoMessage() {}

func (x *GetPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoolResponse.ProtoReflect.Descriptor instead.
func (*GetPoolResponse) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetPoolResponse) GetResult() GetPoolResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetPoolResponse_OK
}

func (x *GetPoolResponse) GetPool() *PoolMetadata {
	if x != nil {
		return x.Pool
	}
	return nil
}

type GetPagedPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryOptions *v1.QueryOptions `protobuf:"bytes,1,opt,name=query_options,json=queryOptions,proto3" json:"query_options,omitempty"`
	Auth         *v1.Auth         `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetPagedPoolsRequest) Reset() {
	*x = GetPagedPoolsRequest{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPagedPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPagedPoolsRequest) ProtoMessage() {}

func (x *GetPagedPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPagedPoolsRequest.ProtoReflect.Descriptor instead.
func (*GetPagedPoolsRequest) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetPagedPoolsRequest) GetQueryOptions() *v1.QueryOptions {
	if x != nil {
		return x.QueryOptions
	}
	return nil
}

func (x *GetPagedPoolsRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type GetPagedPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetPagedPoolsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipcash.pool.v1.GetPagedPoolsResponse_Result" json:"result,omitempty"`
	Pools  []*PoolMetadata              `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *GetPagedPoolsResponse) Reset() {
	*x = GetPagedPoolsResponse{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPagedPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPagedPoolsResponse) ProtoMessage() {}

func (x *GetPagedPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPagedPoolsResponse.ProtoReflect.Descriptor instead.
func (*GetPagedPoolsResponse) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetPagedPoolsResponse) GetResult() GetPagedPoolsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetPagedPoolsResponse_OK
}

func (x *GetPagedPoolsResponse) GetPools() []*PoolMetadata {
	if x != nil {
		return x.Pools
	}
	return nil
}

type ClosePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     *PoolId                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClosedAt               *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=closed_at,json=closedAt,proto3" json:"closed_at,omitempty"`
	NewRendezvousSignature *v1.Signature          `protobuf:"bytes,3,opt,name=new_rendezvous_signature,json=newRendezvousSignature,proto3" json:"new_rendezvous_signature,omitempty"`
	Auth                   *v1.Auth               `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *ClosePoolRequest) Reset() {
	*x = ClosePoolRequest{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClosePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosePoolRequest) ProtoMessage() {}

func (x *ClosePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosePoolRequest.ProtoReflect.Descriptor instead.
func (*ClosePoolRequest) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{6}
}

func (x *ClosePoolRequest) GetId() *PoolId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClosePoolRequest) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

func (x *ClosePoolRequest) GetNewRendezvousSignature() *v1.Signature {
	if x != nil {
		return x.NewRendezvousSignature
	}
	return nil
}

func (x *ClosePoolRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ClosePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ClosePoolResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipcash.pool.v1.ClosePoolResponse_Result" json:"result,omitempty"`
}

func (x *ClosePoolResponse) Reset() {
	*x = ClosePoolResponse{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClosePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosePoolResponse) ProtoMessage() {}

func (x *ClosePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosePoolResponse.ProtoReflect.Descriptor instead.
func (*ClosePoolResponse) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{7}
}

func (x *ClosePoolResponse) GetResult() ClosePoolResponse_Result {
	if x != nil {
		return x.Result
	}
	return ClosePoolResponse_OK
}

type ResolvePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     *PoolId       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Resolution             *Resolution   `protobuf:"bytes,2,opt,name=resolution,proto3" json:"resolution,omitempty"`
	NewRendezvousSignature *v1.Signature `protobuf:"bytes,3,opt,name=new_rendezvous_signature,json=newRendezvousSignature,proto3" json:"new_rendezvous_signature,omitempty"`
	Auth                   *v1.Auth      `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *ResolvePoolRequest) Reset() {
	*x = ResolvePoolRequest{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvePoolRequest) ProtoMessage() {}

func (x *ResolvePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvePoolRequest.ProtoReflect.Descriptor instead.
func (*ResolvePoolRequest) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{8}
}

func (x *ResolvePoolRequest) GetId() *PoolId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResolvePoolRequest) GetResolution() *Resolution {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *ResolvePoolRequest) GetNewRendezvousSignature() *v1.Signature {
	if x != nil {
		return x.NewRendezvousSignature
	}
	return nil
}

func (x *ResolvePoolRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ResolvePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ResolvePoolResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipcash.pool.v1.ResolvePoolResponse_Result" json:"result,omitempty"`
}

func (x *ResolvePoolResponse) Reset() {
	*x = ResolvePoolResponse{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvePoolResponse) ProtoMessage() {}

func (x *ResolvePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvePoolResponse.ProtoReflect.Descriptor instead.
func (*ResolvePoolResponse) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{9}
}

func (x *ResolvePoolResponse) GetResult() ResolvePoolResponse_Result {
	if x != nil {
		return x.Result
	}
	return ResolvePoolResponse_OK
}

type MakeBetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId              *PoolId            `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Bet                 *SignedBetMetadata `protobuf:"bytes,2,opt,name=bet,proto3" json:"bet,omitempty"`
	RendezvousSignature *v1.Signature      `protobuf:"bytes,3,opt,name=rendezvous_signature,json=rendezvousSignature,proto3" json:"rendezvous_signature,omitempty"`
	Auth                *v1.Auth           `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *MakeBetRequest) Reset() {
	*x = MakeBetRequest{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeBetRequest) ProtoMessage() {}

func (x *MakeBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeBetRequest.ProtoReflect.Descriptor instead.
func (*MakeBetRequest) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{10}
}

func (x *MakeBetRequest) GetPoolId() *PoolId {
	if x != nil {
		return x.PoolId
	}
	return nil
}

func (x *MakeBetRequest) GetBet() *SignedBetMetadata {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *MakeBetRequest) GetRendezvousSignature() *v1.Signature {
	if x != nil {
		return x.RendezvousSignature
	}
	return nil
}

func (x *MakeBetRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type MakeBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result MakeBetResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipcash.pool.v1.MakeBetResponse_Result" json:"result,omitempty"`
}

func (x *MakeBetResponse) Reset() {
	*x = MakeBetResponse{}
	mi := &file_pool_v1_pool_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeBetResponse) ProtoMessage() {}

func (x *MakeBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pool_v1_pool_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeBetResponse.ProtoReflect.Descriptor instead.
func (*MakeBetResponse) Descriptor() ([]byte, []int) {
	return file_pool_v1_pool_service_proto_rawDescGZIP(), []int{11}
}

func (x *MakeBetResponse) GetResult() MakeBetResponse_Result {
	if x != nil {
		return x.Result
	}
	return MakeBetResponse_OK
}

var File_pool_v1_pool_service_proto protoreflect.FileDescriptor

var file_pool_v1_pool_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x13,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x5a, 0x0a, 0x14, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f,
	0x75, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x53, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x5a, 0x56, 0x4f, 0x55, 0x53, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x55, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49,
	0x45, 0x44, 0x10, 0x03, 0x22, 0x5d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42,
	0x65, 0x74, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x1f, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x9f,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73,
	0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0xc1, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x92, 0x01, 0x03, 0x10, 0x80, 0x08, 0x52, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x22, 0xa4, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x61, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f,
	0x75, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x16, 0x6e, 0x65, 0x77,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x84, 0x01, 0x0a, 0x11,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x02, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x16, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73,
	0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0xb7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5a,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x44,
	0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x4f, 0x4f, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x04, 0x22, 0xa2, 0x02, 0x0a, 0x0e, 0x4d,
	0x61, 0x6b, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x03, 0x62, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x62, 0x65, 0x74, 0x12, 0x5a, 0x0a, 0x14, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22,
	0xd0, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x45, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x45, 0x54, 0x5f, 0x4f, 0x55,
	0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x05, 0x32, 0x93, 0x04, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x57, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x64,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x4d, 0x61, 0x6b, 0x65,
	0x42, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x7a, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68,
	0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x5a, 0x4a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x61, 0x73, 0x68, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76,
	0x31, 0x3b, 0x70, 0x6f, 0x6f, 0x6c, 0x70, 0x62, 0xa2, 0x02, 0x09, 0x46, 0x50, 0x42, 0x50, 0x6f,
	0x6f, 0x6c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pool_v1_pool_service_proto_rawDescOnce sync.Once
	file_pool_v1_pool_service_proto_rawDescData = file_pool_v1_pool_service_proto_rawDesc
)

func file_pool_v1_pool_service_proto_rawDescGZIP() []byte {
	file_pool_v1_pool_service_proto_rawDescOnce.Do(func() {
		file_pool_v1_pool_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pool_v1_pool_service_proto_rawDescData)
	})
	return file_pool_v1_pool_service_proto_rawDescData
}

var file_pool_v1_pool_service_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_pool_v1_pool_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_pool_v1_pool_service_proto_goTypes = []any{
	(CreatePoolResponse_Result)(0),    // 0: flipcash.pool.v1.CreatePoolResponse.Result
	(GetPoolResponse_Result)(0),       // 1: flipcash.pool.v1.GetPoolResponse.Result
	(GetPagedPoolsResponse_Result)(0), // 2: flipcash.pool.v1.GetPagedPoolsResponse.Result
	(ClosePoolResponse_Result)(0),     // 3: flipcash.pool.v1.ClosePoolResponse.Result
	(ResolvePoolResponse_Result)(0),   // 4: flipcash.pool.v1.ResolvePoolResponse.Result
	(MakeBetResponse_Result)(0),       // 5: flipcash.pool.v1.MakeBetResponse.Result
	(*CreatePoolRequest)(nil),         // 6: flipcash.pool.v1.CreatePoolRequest
	(*CreatePoolResponse)(nil),        // 7: flipcash.pool.v1.CreatePoolResponse
	(*GetPoolRequest)(nil),            // 8: flipcash.pool.v1.GetPoolRequest
	(*GetPoolResponse)(nil),           // 9: flipcash.pool.v1.GetPoolResponse
	(*GetPagedPoolsRequest)(nil),      // 10: flipcash.pool.v1.GetPagedPoolsRequest
	(*GetPagedPoolsResponse)(nil),     // 11: flipcash.pool.v1.GetPagedPoolsResponse
	(*ClosePoolRequest)(nil),          // 12: flipcash.pool.v1.ClosePoolRequest
	(*ClosePoolResponse)(nil),         // 13: flipcash.pool.v1.ClosePoolResponse
	(*ResolvePoolRequest)(nil),        // 14: flipcash.pool.v1.ResolvePoolRequest
	(*ResolvePoolResponse)(nil),       // 15: flipcash.pool.v1.ResolvePoolResponse
	(*MakeBetRequest)(nil),            // 16: flipcash.pool.v1.MakeBetRequest
	(*MakeBetResponse)(nil),           // 17: flipcash.pool.v1.MakeBetResponse
	(*SignedPoolMetadata)(nil),        // 18: flipcash.pool.v1.SignedPoolMetadata
	(*v1.Signature)(nil),              // 19: flipcash.common.v1.Signature
	(*v1.Auth)(nil),                   // 20: flipcash.common.v1.Auth
	(*PoolId)(nil),                    // 21: flipcash.pool.v1.PoolId
	(*PoolMetadata)(nil),              // 22: flipcash.pool.v1.PoolMetadata
	(*v1.QueryOptions)(nil),           // 23: flipcash.common.v1.QueryOptions
	(*timestamppb.Timestamp)(nil),     // 24: google.protobuf.Timestamp
	(*Resolution)(nil),                // 25: flipcash.pool.v1.Resolution
	(*SignedBetMetadata)(nil),         // 26: flipcash.pool.v1.SignedBetMetadata
}
var file_pool_v1_pool_service_proto_depIdxs = []int32{
	18, // 0: flipcash.pool.v1.CreatePoolRequest.pool:type_name -> flipcash.pool.v1.SignedPoolMetadata
	19, // 1: flipcash.pool.v1.CreatePoolRequest.rendezvous_signature:type_name -> flipcash.common.v1.Signature
	20, // 2: flipcash.pool.v1.CreatePoolRequest.auth:type_name -> flipcash.common.v1.Auth
	0,  // 3: flipcash.pool.v1.CreatePoolResponse.result:type_name -> flipcash.pool.v1.CreatePoolResponse.Result
	21, // 4: flipcash.pool.v1.GetPoolRequest.id:type_name -> flipcash.pool.v1.PoolId
	1,  // 5: flipcash.pool.v1.GetPoolResponse.result:type_name -> flipcash.pool.v1.GetPoolResponse.Result
	22, // 6: flipcash.pool.v1.GetPoolResponse.pool:type_name -> flipcash.pool.v1.PoolMetadata
	23, // 7: flipcash.pool.v1.GetPagedPoolsRequest.query_options:type_name -> flipcash.common.v1.QueryOptions
	20, // 8: flipcash.pool.v1.GetPagedPoolsRequest.auth:type_name -> flipcash.common.v1.Auth
	2,  // 9: flipcash.pool.v1.GetPagedPoolsResponse.result:type_name -> flipcash.pool.v1.GetPagedPoolsResponse.Result
	22, // 10: flipcash.pool.v1.GetPagedPoolsResponse.pools:type_name -> flipcash.pool.v1.PoolMetadata
	21, // 11: flipcash.pool.v1.ClosePoolRequest.id:type_name -> flipcash.pool.v1.PoolId
	24, // 12: flipcash.pool.v1.ClosePoolRequest.closed_at:type_name -> google.protobuf.Timestamp
	19, // 13: flipcash.pool.v1.ClosePoolRequest.new_rendezvous_signature:type_name -> flipcash.common.v1.Signature
	20, // 14: flipcash.pool.v1.ClosePoolRequest.auth:type_name -> flipcash.common.v1.Auth
	3,  // 15: flipcash.pool.v1.ClosePoolResponse.result:type_name -> flipcash.pool.v1.ClosePoolResponse.Result
	21, // 16: flipcash.pool.v1.ResolvePoolRequest.id:type_name -> flipcash.pool.v1.PoolId
	25, // 17: flipcash.pool.v1.ResolvePoolRequest.resolution:type_name -> flipcash.pool.v1.Resolution
	19, // 18: flipcash.pool.v1.ResolvePoolRequest.new_rendezvous_signature:type_name -> flipcash.common.v1.Signature
	20, // 19: flipcash.pool.v1.ResolvePoolRequest.auth:type_name -> flipcash.common.v1.Auth
	4,  // 20: flipcash.pool.v1.ResolvePoolResponse.result:type_name -> flipcash.pool.v1.ResolvePoolResponse.Result
	21, // 21: flipcash.pool.v1.MakeBetRequest.pool_id:type_name -> flipcash.pool.v1.PoolId
	26, // 22: flipcash.pool.v1.MakeBetRequest.bet:type_name -> flipcash.pool.v1.SignedBetMetadata
	19, // 23: flipcash.pool.v1.MakeBetRequest.rendezvous_signature:type_name -> flipcash.common.v1.Signature
	20, // 24: flipcash.pool.v1.MakeBetRequest.auth:type_name -> flipcash.common.v1.Auth
	5,  // 25: flipcash.pool.v1.MakeBetResponse.result:type_name -> flipcash.pool.v1.MakeBetResponse.Result
	6,  // 26: flipcash.pool.v1.Pool.CreatePool:input_type -> flipcash.pool.v1.CreatePoolRequest
	8,  // 27: flipcash.pool.v1.Pool.GetPool:input_type -> flipcash.pool.v1.GetPoolRequest
	10, // 28: flipcash.pool.v1.Pool.GetPagedPools:input_type -> flipcash.pool.v1.GetPagedPoolsRequest
	12, // 29: flipcash.pool.v1.Pool.ClosePool:input_type -> flipcash.pool.v1.ClosePoolRequest
	14, // 30: flipcash.pool.v1.Pool.ResolvePool:input_type -> flipcash.pool.v1.ResolvePoolRequest
	16, // 31: flipcash.pool.v1.Pool.MakeBet:input_type -> flipcash.pool.v1.MakeBetRequest
	7,  // 32: flipcash.pool.v1.Pool.CreatePool:output_type -> flipcash.pool.v1.CreatePoolResponse
	9,  // 33: flipcash.pool.v1.Pool.GetPool:output_type -> flipcash.pool.v1.GetPoolResponse
	11, // 34: flipcash.pool.v1.Pool.GetPagedPools:output_type -> flipcash.pool.v1.GetPagedPoolsResponse
	13, // 35: flipcash.pool.v1.Pool.ClosePool:output_type -> flipcash.pool.v1.ClosePoolResponse
	15, // 36: flipcash.pool.v1.Pool.ResolvePool:output_type -> flipcash.pool.v1.ResolvePoolResponse
	17, // 37: flipcash.pool.v1.Pool.MakeBet:output_type -> flipcash.pool.v1.MakeBetResponse
	32, // [32:38] is the sub-list for method output_type
	26, // [26:32] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_pool_v1_pool_service_proto_init() }
func file_pool_v1_pool_service_proto_init() {
	if File_pool_v1_pool_service_proto != nil {
		return
	}
	file_pool_v1_model_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pool_v1_pool_service_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pool_v1_pool_service_proto_goTypes,
		DependencyIndexes: file_pool_v1_pool_service_proto_depIdxs,
		EnumInfos:         file_pool_v1_pool_service_proto_enumTypes,
		MessageInfos:      file_pool_v1_pool_service_proto_msgTypes,
	}.Build()
	File_pool_v1_pool_service_proto = out.File
	file_pool_v1_pool_service_proto_rawDesc = nil
	file_pool_v1_pool_service_proto_goTypes = nil
	file_pool_v1_pool_service_proto_depIdxs = nil
}
