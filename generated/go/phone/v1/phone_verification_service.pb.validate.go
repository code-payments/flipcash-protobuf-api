// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: phone/v1/phone_verification_service.proto

package phonepb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonpb "github.com/code-payments/flipcash-protobuf-api/generated/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonpb.Platform(0)
)

// Validate checks the field values on SendVerificationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerificationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerificationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerificationCodeRequestMultiError, or nil if none found.
func (m *SendVerificationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerificationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPhoneNumber() == nil {
		err := SendVerificationCodeRequestValidationError{
			field:  "PhoneNumber",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPhoneNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendVerificationCodeRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendVerificationCodeRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendVerificationCodeRequestValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _SendVerificationCodeRequest_Platform_InLookup[m.GetPlatform()]; !ok {
		err := SendVerificationCodeRequestValidationError{
			field:  "Platform",
			reason: "value must be in list [APPLE GOOGLE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAuth() == nil {
		err := SendVerificationCodeRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendVerificationCodeRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendVerificationCodeRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendVerificationCodeRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendVerificationCodeRequestMultiError(errors)
	}

	return nil
}

// SendVerificationCodeRequestMultiError is an error wrapping multiple
// validation errors returned by SendVerificationCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type SendVerificationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerificationCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerificationCodeRequestMultiError) AllErrors() []error { return m }

// SendVerificationCodeRequestValidationError is the validation error returned
// by SendVerificationCodeRequest.Validate if the designated constraints
// aren't met.
type SendVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerificationCodeRequestValidationError) ErrorName() string {
	return "SendVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerificationCodeRequestValidationError{}

var _SendVerificationCodeRequest_Platform_InLookup = map[commonpb.Platform]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on SendVerificationCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerificationCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerificationCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerificationCodeResponseMultiError, or nil if none found.
func (m *SendVerificationCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerificationCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SendVerificationCodeResponseMultiError(errors)
	}

	return nil
}

// SendVerificationCodeResponseMultiError is an error wrapping multiple
// validation errors returned by SendVerificationCodeResponse.ValidateAll() if
// the designated constraints aren't met.
type SendVerificationCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerificationCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerificationCodeResponseMultiError) AllErrors() []error { return m }

// SendVerificationCodeResponseValidationError is the validation error returned
// by SendVerificationCodeResponse.Validate if the designated constraints
// aren't met.
type SendVerificationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerificationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerificationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerificationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerificationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerificationCodeResponseValidationError) ErrorName() string {
	return "SendVerificationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerificationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerificationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerificationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerificationCodeResponseValidationError{}

// Validate checks the field values on CheckVerificationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckVerificationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckVerificationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckVerificationCodeRequestMultiError, or nil if none found.
func (m *CheckVerificationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckVerificationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPhoneNumber() == nil {
		err := CheckVerificationCodeRequestValidationError{
			field:  "PhoneNumber",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPhoneNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckVerificationCodeRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckVerificationCodeRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckVerificationCodeRequestValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCode() == nil {
		err := CheckVerificationCodeRequestValidationError{
			field:  "Code",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckVerificationCodeRequestValidationError{
					field:  "Code",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckVerificationCodeRequestValidationError{
					field:  "Code",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckVerificationCodeRequestValidationError{
				field:  "Code",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuth() == nil {
		err := CheckVerificationCodeRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckVerificationCodeRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckVerificationCodeRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckVerificationCodeRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckVerificationCodeRequestMultiError(errors)
	}

	return nil
}

// CheckVerificationCodeRequestMultiError is an error wrapping multiple
// validation errors returned by CheckVerificationCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckVerificationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckVerificationCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckVerificationCodeRequestMultiError) AllErrors() []error { return m }

// CheckVerificationCodeRequestValidationError is the validation error returned
// by CheckVerificationCodeRequest.Validate if the designated constraints
// aren't met.
type CheckVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckVerificationCodeRequestValidationError) ErrorName() string {
	return "CheckVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckVerificationCodeRequestValidationError{}

// Validate checks the field values on CheckVerificationCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckVerificationCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckVerificationCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckVerificationCodeResponseMultiError, or nil if none found.
func (m *CheckVerificationCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckVerificationCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CheckVerificationCodeResponseMultiError(errors)
	}

	return nil
}

// CheckVerificationCodeResponseMultiError is an error wrapping multiple
// validation errors returned by CheckVerificationCodeResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckVerificationCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckVerificationCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckVerificationCodeResponseMultiError) AllErrors() []error { return m }

// CheckVerificationCodeResponseValidationError is the validation error
// returned by CheckVerificationCodeResponse.Validate if the designated
// constraints aren't met.
type CheckVerificationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckVerificationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckVerificationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckVerificationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckVerificationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckVerificationCodeResponseValidationError) ErrorName() string {
	return "CheckVerificationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckVerificationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckVerificationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckVerificationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckVerificationCodeResponseValidationError{}

// Validate checks the field values on UnlinkRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnlinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnlinkRequestMultiError, or
// nil if none found.
func (m *UnlinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPhoneNumber() == nil {
		err := UnlinkRequestValidationError{
			field:  "PhoneNumber",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPhoneNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlinkRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlinkRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlinkRequestValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuth() == nil {
		err := UnlinkRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlinkRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlinkRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlinkRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnlinkRequestMultiError(errors)
	}

	return nil
}

// UnlinkRequestMultiError is an error wrapping multiple validation errors
// returned by UnlinkRequest.ValidateAll() if the designated constraints
// aren't met.
type UnlinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlinkRequestMultiError) AllErrors() []error { return m }

// UnlinkRequestValidationError is the validation error returned by
// UnlinkRequest.Validate if the designated constraints aren't met.
type UnlinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkRequestValidationError) ErrorName() string { return "UnlinkRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnlinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkRequestValidationError{}

// Validate checks the field values on UnlinkResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnlinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlinkResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnlinkResponseMultiError,
// or nil if none found.
func (m *UnlinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UnlinkResponseMultiError(errors)
	}

	return nil
}

// UnlinkResponseMultiError is an error wrapping multiple validation errors
// returned by UnlinkResponse.ValidateAll() if the designated constraints
// aren't met.
type UnlinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlinkResponseMultiError) AllErrors() []error { return m }

// UnlinkResponseValidationError is the validation error returned by
// UnlinkResponse.Validate if the designated constraints aren't met.
type UnlinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkResponseValidationError) ErrorName() string { return "UnlinkResponseValidationError" }

// Error satisfies the builtin error interface
func (e UnlinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkResponseValidationError{}
