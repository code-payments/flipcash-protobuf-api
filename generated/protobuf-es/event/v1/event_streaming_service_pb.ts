// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file event/v1/event_streaming_service.proto (package flipcash.event.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Auth, ClientPong, ServerPing } from "../../common/v1/common_pb";
import { EventBatch } from "./model_pb";

/**
 * @generated from message flipcash.event.v1.StreamEventsRequest
 */
export class StreamEventsRequest extends Message<StreamEventsRequest> {
  /**
   * @generated from oneof flipcash.event.v1.StreamEventsRequest.type
   */
  type: {
    /**
     * @generated from field: flipcash.event.v1.StreamEventsRequest.Params params = 1;
     */
    value: StreamEventsRequest_Params;
    case: "params";
  } | {
    /**
     * @generated from field: flipcash.common.v1.ClientPong pong = 2;
     */
    value: ClientPong;
    case: "pong";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StreamEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.event.v1.StreamEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: StreamEventsRequest_Params, oneof: "type" },
    { no: 2, name: "pong", kind: "message", T: ClientPong, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsRequest {
    return new StreamEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsRequest {
    return new StreamEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsRequest {
    return new StreamEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamEventsRequest | PlainMessage<StreamEventsRequest> | undefined, b: StreamEventsRequest | PlainMessage<StreamEventsRequest> | undefined): boolean {
    return proto3.util.equals(StreamEventsRequest, a, b);
  }
}

/**
 * @generated from message flipcash.event.v1.StreamEventsRequest.Params
 */
export class StreamEventsRequest_Params extends Message<StreamEventsRequest_Params> {
  /**
   * @generated from field: flipcash.common.v1.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * ts contains the time for stream open.
   *
   * It is used primarily as a nonce for auth. Server may reject
   * timestamps that are too far in the future or past.
   *
   * @generated from field: google.protobuf.Timestamp ts = 2;
   */
  ts?: Timestamp;

  constructor(data?: PartialMessage<StreamEventsRequest_Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.event.v1.StreamEventsRequest.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "ts", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsRequest_Params {
    return new StreamEventsRequest_Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsRequest_Params {
    return new StreamEventsRequest_Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsRequest_Params {
    return new StreamEventsRequest_Params().fromJsonString(jsonString, options);
  }

  static equals(a: StreamEventsRequest_Params | PlainMessage<StreamEventsRequest_Params> | undefined, b: StreamEventsRequest_Params | PlainMessage<StreamEventsRequest_Params> | undefined): boolean {
    return proto3.util.equals(StreamEventsRequest_Params, a, b);
  }
}

/**
 * @generated from message flipcash.event.v1.StreamEventsResponse
 */
export class StreamEventsResponse extends Message<StreamEventsResponse> {
  /**
   * @generated from oneof flipcash.event.v1.StreamEventsResponse.type
   */
  type: {
    /**
     * @generated from field: flipcash.common.v1.ServerPing ping = 1;
     */
    value: ServerPing;
    case: "ping";
  } | {
    /**
     * @generated from field: flipcash.event.v1.StreamEventsResponse.StreamError error = 2;
     */
    value: StreamEventsResponse_StreamError;
    case: "error";
  } | {
    /**
     * @generated from field: flipcash.event.v1.EventBatch events = 3;
     */
    value: EventBatch;
    case: "events";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StreamEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.event.v1.StreamEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ping", kind: "message", T: ServerPing, oneof: "type" },
    { no: 2, name: "error", kind: "message", T: StreamEventsResponse_StreamError, oneof: "type" },
    { no: 3, name: "events", kind: "message", T: EventBatch, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsResponse {
    return new StreamEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsResponse {
    return new StreamEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsResponse {
    return new StreamEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamEventsResponse | PlainMessage<StreamEventsResponse> | undefined, b: StreamEventsResponse | PlainMessage<StreamEventsResponse> | undefined): boolean {
    return proto3.util.equals(StreamEventsResponse, a, b);
  }
}

/**
 * @generated from message flipcash.event.v1.StreamEventsResponse.StreamError
 */
export class StreamEventsResponse_StreamError extends Message<StreamEventsResponse_StreamError> {
  /**
   * @generated from field: flipcash.event.v1.StreamEventsResponse.StreamError.Code code = 1;
   */
  code = StreamEventsResponse_StreamError_Code.DENIED;

  constructor(data?: PartialMessage<StreamEventsResponse_StreamError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.event.v1.StreamEventsResponse.StreamError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(StreamEventsResponse_StreamError_Code) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEventsResponse_StreamError {
    return new StreamEventsResponse_StreamError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEventsResponse_StreamError {
    return new StreamEventsResponse_StreamError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEventsResponse_StreamError {
    return new StreamEventsResponse_StreamError().fromJsonString(jsonString, options);
  }

  static equals(a: StreamEventsResponse_StreamError | PlainMessage<StreamEventsResponse_StreamError> | undefined, b: StreamEventsResponse_StreamError | PlainMessage<StreamEventsResponse_StreamError> | undefined): boolean {
    return proto3.util.equals(StreamEventsResponse_StreamError, a, b);
  }
}

/**
 * @generated from enum flipcash.event.v1.StreamEventsResponse.StreamError.Code
 */
export enum StreamEventsResponse_StreamError_Code {
  /**
   * @generated from enum value: DENIED = 0;
   */
  DENIED = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(StreamEventsResponse_StreamError_Code)
proto3.util.setEnumType(StreamEventsResponse_StreamError_Code, "flipcash.event.v1.StreamEventsResponse.StreamError.Code", [
  { no: 0, name: "DENIED" },
]);

