// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file account/v1/flipcash_account_service.proto (package flipcash.account.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Auth, CountryCode, Platform, PublicKey, Signature, UserId } from "../../common/v1/common_pb";

/**
 * @generated from message flipcash.account.v1.RegisterRequest
 */
export class RegisterRequest extends Message<RegisterRequest> {
  /**
   * PublicKey the public key that is authorized to perform actions on the
   * registered users behalf.
   *
   * @generated from field: flipcash.common.v1.PublicKey public_key = 1;
   */
  publicKey?: PublicKey;

  /**
   * Signature of this message (without the signature), using the provided keypair.
   *
   * @generated from field: flipcash.common.v1.Signature signature = 2;
   */
  signature?: Signature;

  constructor(data?: PartialMessage<RegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.account.v1.RegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "message", T: PublicKey },
    { no: 2, name: "signature", kind: "message", T: Signature },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRequest {
    return new RegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRequest {
    return new RegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRequest {
    return new RegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRequest | PlainMessage<RegisterRequest> | undefined, b: RegisterRequest | PlainMessage<RegisterRequest> | undefined): boolean {
    return proto3.util.equals(RegisterRequest, a, b);
  }
}

/**
 * @generated from message flipcash.account.v1.RegisterResponse
 */
export class RegisterResponse extends Message<RegisterResponse> {
  /**
   * @generated from field: flipcash.account.v1.RegisterResponse.Result result = 1;
   */
  result = RegisterResponse_Result.OK;

  /**
   * The UserId associated with the account.
   *
   * @generated from field: flipcash.common.v1.UserId user_id = 2;
   */
  userId?: UserId;

  constructor(data?: PartialMessage<RegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.account.v1.RegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(RegisterResponse_Result) },
    { no: 2, name: "user_id", kind: "message", T: UserId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterResponse {
    return new RegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterResponse {
    return new RegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterResponse {
    return new RegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterResponse | PlainMessage<RegisterResponse> | undefined, b: RegisterResponse | PlainMessage<RegisterResponse> | undefined): boolean {
    return proto3.util.equals(RegisterResponse, a, b);
  }
}

/**
 * @generated from enum flipcash.account.v1.RegisterResponse.Result
 */
export enum RegisterResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_SIGNATURE = 1;
   */
  INVALID_SIGNATURE = 1,

  /**
   * @generated from enum value: DENIED = 2;
   */
  DENIED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RegisterResponse_Result)
proto3.util.setEnumType(RegisterResponse_Result, "flipcash.account.v1.RegisterResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_SIGNATURE" },
  { no: 2, name: "DENIED" },
]);

/**
 * @generated from message flipcash.account.v1.LoginRequest
 */
export class LoginRequest extends Message<LoginRequest> {
  /**
   * Timestamp is the timestamp the request was generated
   *
   * The server may reject the request if the timestamp is too far off
   * the current (server) time. This is to prevent replay attacks.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: flipcash.common.v1.Auth auth = 2;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<LoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.account.v1.LoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest {
    return new LoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean {
    return proto3.util.equals(LoginRequest, a, b);
  }
}

/**
 * @generated from message flipcash.account.v1.LoginResponse
 */
export class LoginResponse extends Message<LoginResponse> {
  /**
   * @generated from field: flipcash.account.v1.LoginResponse.Result result = 1;
   */
  result = LoginResponse_Result.OK;

  /**
   * @generated from field: flipcash.common.v1.UserId user_id = 2;
   */
  userId?: UserId;

  constructor(data?: PartialMessage<LoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.account.v1.LoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(LoginResponse_Result) },
    { no: 2, name: "user_id", kind: "message", T: UserId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse {
    return new LoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginResponse | PlainMessage<LoginResponse> | undefined, b: LoginResponse | PlainMessage<LoginResponse> | undefined): boolean {
    return proto3.util.equals(LoginResponse, a, b);
  }
}

/**
 * @generated from enum flipcash.account.v1.LoginResponse.Result
 */
export enum LoginResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_TIMESTAMP = 1;
   */
  INVALID_TIMESTAMP = 1,

  /**
   * @generated from enum value: DENIED = 2;
   */
  DENIED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(LoginResponse_Result)
proto3.util.setEnumType(LoginResponse_Result, "flipcash.account.v1.LoginResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_TIMESTAMP" },
  { no: 2, name: "DENIED" },
]);

/**
 * @generated from message flipcash.account.v1.GetUserFlagsRequest
 */
export class GetUserFlagsRequest extends Message<GetUserFlagsRequest> {
  /**
   * @generated from field: flipcash.common.v1.UserId user_id = 1;
   */
  userId?: UserId;

  /**
   * @generated from field: flipcash.common.v1.Auth auth = 2;
   */
  auth?: Auth;

  /**
   * @generated from field: flipcash.common.v1.Platform platform = 3;
   */
  platform = Platform.UNKNOWN;

  /**
   * @generated from field: flipcash.common.v1.CountryCode country_code = 4;
   */
  countryCode?: CountryCode;

  constructor(data?: PartialMessage<GetUserFlagsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.account.v1.GetUserFlagsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "message", T: UserId },
    { no: 2, name: "auth", kind: "message", T: Auth },
    { no: 3, name: "platform", kind: "enum", T: proto3.getEnumType(Platform) },
    { no: 4, name: "country_code", kind: "message", T: CountryCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserFlagsRequest {
    return new GetUserFlagsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserFlagsRequest {
    return new GetUserFlagsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserFlagsRequest {
    return new GetUserFlagsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserFlagsRequest | PlainMessage<GetUserFlagsRequest> | undefined, b: GetUserFlagsRequest | PlainMessage<GetUserFlagsRequest> | undefined): boolean {
    return proto3.util.equals(GetUserFlagsRequest, a, b);
  }
}

/**
 * @generated from message flipcash.account.v1.GetUserFlagsResponse
 */
export class GetUserFlagsResponse extends Message<GetUserFlagsResponse> {
  /**
   * @generated from field: flipcash.account.v1.GetUserFlagsResponse.Result result = 1;
   */
  result = GetUserFlagsResponse_Result.OK;

  /**
   * @generated from field: flipcash.account.v1.UserFlags user_flags = 2;
   */
  userFlags?: UserFlags;

  constructor(data?: PartialMessage<GetUserFlagsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.account.v1.GetUserFlagsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(GetUserFlagsResponse_Result) },
    { no: 2, name: "user_flags", kind: "message", T: UserFlags },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserFlagsResponse {
    return new GetUserFlagsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserFlagsResponse {
    return new GetUserFlagsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserFlagsResponse {
    return new GetUserFlagsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserFlagsResponse | PlainMessage<GetUserFlagsResponse> | undefined, b: GetUserFlagsResponse | PlainMessage<GetUserFlagsResponse> | undefined): boolean {
    return proto3.util.equals(GetUserFlagsResponse, a, b);
  }
}

/**
 * @generated from enum flipcash.account.v1.GetUserFlagsResponse.Result
 */
export enum GetUserFlagsResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: DENIED = 1;
   */
  DENIED = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetUserFlagsResponse_Result)
proto3.util.setEnumType(GetUserFlagsResponse_Result, "flipcash.account.v1.GetUserFlagsResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "DENIED" },
]);

/**
 * @generated from message flipcash.account.v1.UserFlags
 */
export class UserFlags extends Message<UserFlags> {
  /**
   * Is this a fully registered account using IAP for account creation?
   *
   * @generated from field: bool is_registered_account = 1;
   */
  isRegisteredAccount = false;

  /**
   * Is this user associated with a Flipcash staff member?
   *
   * @generated from field: bool is_staff = 2;
   */
  isStaff = false;

  /**
   * Does this user require IAP for registration in the account creation flow?
   *
   * @generated from field: bool requires_iap_for_registration = 3;
   */
  requiresIapForRegistration = false;

  /**
   * The set of supported on ramp providers for the user, based on their platform
   * and locale if provided
   *
   * @generated from field: repeated flipcash.account.v1.UserFlags.OnRampProvider supported_on_ramp_providers = 4;
   */
  supportedOnRampProviders: UserFlags_OnRampProvider[] = [];

  /**
   * The preferred on ramp provider for this user. If the value is UNKNOWN, client
   * should show the list of all supported providers.
   *
   * @generated from field: flipcash.account.v1.UserFlags.OnRampProvider preferred_on_ramp_provider = 5;
   */
  preferredOnRampProvider = UserFlags_OnRampProvider.UNKNOWN;

  constructor(data?: PartialMessage<UserFlags>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.account.v1.UserFlags";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_registered_account", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "is_staff", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "requires_iap_for_registration", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "supported_on_ramp_providers", kind: "enum", T: proto3.getEnumType(UserFlags_OnRampProvider), repeated: true },
    { no: 5, name: "preferred_on_ramp_provider", kind: "enum", T: proto3.getEnumType(UserFlags_OnRampProvider) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserFlags {
    return new UserFlags().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserFlags {
    return new UserFlags().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserFlags {
    return new UserFlags().fromJsonString(jsonString, options);
  }

  static equals(a: UserFlags | PlainMessage<UserFlags> | undefined, b: UserFlags | PlainMessage<UserFlags> | undefined): boolean {
    return proto3.util.equals(UserFlags, a, b);
  }
}

/**
 * @generated from enum flipcash.account.v1.UserFlags.OnRampProvider
 */
export enum UserFlags_OnRampProvider {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: COINBASE_VIRTUAL = 1;
   */
  COINBASE_VIRTUAL = 1,

  /**
   * @generated from enum value: COINBASE_PHYSICAL_DEBIT = 2;
   */
  COINBASE_PHYSICAL_DEBIT = 2,

  /**
   * @generated from enum value: COINBASE_PHYSICAL_CREDIT = 3;
   */
  COINBASE_PHYSICAL_CREDIT = 3,

  /**
   * @generated from enum value: CRYPTO_WALLET = 4;
   */
  CRYPTO_WALLET = 4,

  /**
   * @generated from enum value: PHANTOM = 5;
   */
  PHANTOM = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(UserFlags_OnRampProvider)
proto3.util.setEnumType(UserFlags_OnRampProvider, "flipcash.account.v1.UserFlags.OnRampProvider", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "COINBASE_VIRTUAL" },
  { no: 2, name: "COINBASE_PHYSICAL_DEBIT" },
  { no: 3, name: "COINBASE_PHYSICAL_CREDIT" },
  { no: 4, name: "CRYPTO_WALLET" },
  { no: 5, name: "PHANTOM" },
]);

