// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file thirdparty/v1/model.proto (package flipcash.thirdparty.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum flipcash.thirdparty.v1.Provider
 */
export enum Provider {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: COINBASE = 1;
   */
  COINBASE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Provider)
proto3.util.setEnumType(Provider, "flipcash.thirdparty.v1.Provider", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "COINBASE" },
]);

/**
 * @generated from message flipcash.thirdparty.v1.ApiKey
 */
export class ApiKey extends Message<ApiKey> {
  /**
   * @generated from field: flipcash.thirdparty.v1.Provider provider = 1;
   */
  provider = Provider.UNKNOWN;

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<ApiKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.thirdparty.v1.ApiKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(Provider) },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiKey {
    return new ApiKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiKey {
    return new ApiKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiKey {
    return new ApiKey().fromJsonString(jsonString, options);
  }

  static equals(a: ApiKey | PlainMessage<ApiKey> | undefined, b: ApiKey | PlainMessage<ApiKey> | undefined): boolean {
    return proto3.util.equals(ApiKey, a, b);
  }
}

/**
 * @generated from message flipcash.thirdparty.v1.Jwt
 */
export class Jwt extends Message<Jwt> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<Jwt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.thirdparty.v1.Jwt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Jwt {
    return new Jwt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Jwt {
    return new Jwt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Jwt {
    return new Jwt().fromJsonString(jsonString, options);
  }

  static equals(a: Jwt | PlainMessage<Jwt> | undefined, b: Jwt | PlainMessage<Jwt> | undefined): boolean {
    return proto3.util.equals(Jwt, a, b);
  }
}

