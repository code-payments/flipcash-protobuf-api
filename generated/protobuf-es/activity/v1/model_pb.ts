// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file activity/v1/model.proto (package flipcash.activity.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { CryptoPaymentAmount, PublicKey } from "../../common/v1/common_pb";
import { PoolId, UserOutcome } from "../../pool/v1/model_pb";

/**
 * ActivityFeedType enables multiple activity feeds, where notifications may be
 * split across different parts of the app
 *
 * @generated from enum flipcash.activity.v1.ActivityFeedType
 */
export enum ActivityFeedType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Activity feed displayed under the Balance tab
   *
   * @generated from enum value: TRANSACTION_HISTORY = 1;
   */
  TRANSACTION_HISTORY = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ActivityFeedType)
proto3.util.setEnumType(ActivityFeedType, "flipcash.activity.v1.ActivityFeedType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "TRANSACTION_HISTORY" },
]);

/**
 * NotificationState determines the mutability of a notification, and whether
 * client should attempt to refetch state.
 *
 * @generated from enum flipcash.activity.v1.NotificationState
 */
export enum NotificationState {
  /**
   * @generated from enum value: NOTIFICATION_STATE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Notification state will change based on some app action in the future
   *
   * @generated from enum value: NOTIFICATION_STATE_PENDING = 1;
   */
  PENDING = 1,

  /**
   * Notification state will not change
   *
   * @generated from enum value: NOTIFICATION_STATE_COMPLETED = 2;
   */
  COMPLETED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(NotificationState)
proto3.util.setEnumType(NotificationState, "flipcash.activity.v1.NotificationState", [
  { no: 0, name: "NOTIFICATION_STATE_UNKNOWN" },
  { no: 1, name: "NOTIFICATION_STATE_PENDING" },
  { no: 2, name: "NOTIFICATION_STATE_COMPLETED" },
]);

/**
 * The ID of the notification
 *
 * @generated from message flipcash.activity.v1.NotificationId
 */
export class NotificationId extends Message<NotificationId> {
  /**
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<NotificationId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.NotificationId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationId {
    return new NotificationId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationId {
    return new NotificationId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationId {
    return new NotificationId().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationId | PlainMessage<NotificationId> | undefined, b: NotificationId | PlainMessage<NotificationId> | undefined): boolean {
    return proto3.util.equals(NotificationId, a, b);
  }
}

/**
 * Notification is a message that is displayed in an activity feed
 *
 * @generated from message flipcash.activity.v1.Notification
 */
export class Notification extends Message<Notification> {
  /**
   * The ID of this notification
   *
   * @generated from field: flipcash.activity.v1.NotificationId id = 1;
   */
  id?: NotificationId;

  /**
   * The localized title text for the notification
   *
   * @generated from field: string localized_text = 2;
   */
  localizedText = "";

  /**
   * If a payment applies, the amount that was paid
   *
   * @generated from field: flipcash.common.v1.CryptoPaymentAmount payment_amount = 3;
   */
  paymentAmount?: CryptoPaymentAmount;

  /**
   * The timestamp of this notification
   *
   * @generated from field: google.protobuf.Timestamp ts = 4;
   */
  ts?: Timestamp;

  /**
   * The state of this notification
   *
   * @generated from field: flipcash.activity.v1.NotificationState state = 10;
   */
  state = NotificationState.UNKNOWN;

  /**
   * Additional metadata for this notification specific to the notification
   *
   * @generated from oneof flipcash.activity.v1.Notification.additional_metadata
   */
  additionalMetadata: {
    /**
     * @generated from field: flipcash.activity.v1.WelcomeBonusNotificationMetadata welcome_bonus = 5;
     */
    value: WelcomeBonusNotificationMetadata;
    case: "welcomeBonus";
  } | {
    /**
     * @generated from field: flipcash.activity.v1.GaveCryptoNotificationMetadata gave_crypto = 6;
     */
    value: GaveCryptoNotificationMetadata;
    case: "gaveCrypto";
  } | {
    /**
     * @generated from field: flipcash.activity.v1.ReceivedCryptoNotificationMetadata received_crypto = 7;
     */
    value: ReceivedCryptoNotificationMetadata;
    case: "receivedCrypto";
  } | {
    /**
     * @generated from field: flipcash.activity.v1.WithdrewCryptoNotificationMetadata withdrew_crypto = 8;
     */
    value: WithdrewCryptoNotificationMetadata;
    case: "withdrewCrypto";
  } | {
    /**
     * @generated from field: flipcash.activity.v1.SentCryptoNotificationMetadata sent_crypto = 9;
     */
    value: SentCryptoNotificationMetadata;
    case: "sentCrypto";
  } | {
    /**
     * @generated from field: flipcash.activity.v1.DepositedCryptoNotificationMetadata deposited_crypto = 11;
     */
    value: DepositedCryptoNotificationMetadata;
    case: "depositedCrypto";
  } | {
    /**
     * @generated from field: flipcash.activity.v1.PaidCryptoNotificationMetadata paid_crypto = 12;
     */
    value: PaidCryptoNotificationMetadata;
    case: "paidCrypto";
  } | {
    /**
     * @generated from field: flipcash.activity.v1.DistributedCryptoNotificationMetadata distributed_crypto = 13;
     */
    value: DistributedCryptoNotificationMetadata;
    case: "distributedCrypto";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Notification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.Notification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: NotificationId },
    { no: 2, name: "localized_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "payment_amount", kind: "message", T: CryptoPaymentAmount },
    { no: 4, name: "ts", kind: "message", T: Timestamp },
    { no: 10, name: "state", kind: "enum", T: proto3.getEnumType(NotificationState) },
    { no: 5, name: "welcome_bonus", kind: "message", T: WelcomeBonusNotificationMetadata, oneof: "additional_metadata" },
    { no: 6, name: "gave_crypto", kind: "message", T: GaveCryptoNotificationMetadata, oneof: "additional_metadata" },
    { no: 7, name: "received_crypto", kind: "message", T: ReceivedCryptoNotificationMetadata, oneof: "additional_metadata" },
    { no: 8, name: "withdrew_crypto", kind: "message", T: WithdrewCryptoNotificationMetadata, oneof: "additional_metadata" },
    { no: 9, name: "sent_crypto", kind: "message", T: SentCryptoNotificationMetadata, oneof: "additional_metadata" },
    { no: 11, name: "deposited_crypto", kind: "message", T: DepositedCryptoNotificationMetadata, oneof: "additional_metadata" },
    { no: 12, name: "paid_crypto", kind: "message", T: PaidCryptoNotificationMetadata, oneof: "additional_metadata" },
    { no: 13, name: "distributed_crypto", kind: "message", T: DistributedCryptoNotificationMetadata, oneof: "additional_metadata" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Notification {
    return new Notification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJsonString(jsonString, options);
  }

  static equals(a: Notification | PlainMessage<Notification> | undefined, b: Notification | PlainMessage<Notification> | undefined): boolean {
    return proto3.util.equals(Notification, a, b);
  }
}

/**
 * @generated from message flipcash.activity.v1.WelcomeBonusNotificationMetadata
 */
export class WelcomeBonusNotificationMetadata extends Message<WelcomeBonusNotificationMetadata> {
  constructor(data?: PartialMessage<WelcomeBonusNotificationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.WelcomeBonusNotificationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WelcomeBonusNotificationMetadata {
    return new WelcomeBonusNotificationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WelcomeBonusNotificationMetadata {
    return new WelcomeBonusNotificationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WelcomeBonusNotificationMetadata {
    return new WelcomeBonusNotificationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: WelcomeBonusNotificationMetadata | PlainMessage<WelcomeBonusNotificationMetadata> | undefined, b: WelcomeBonusNotificationMetadata | PlainMessage<WelcomeBonusNotificationMetadata> | undefined): boolean {
    return proto3.util.equals(WelcomeBonusNotificationMetadata, a, b);
  }
}

/**
 * @generated from message flipcash.activity.v1.GaveCryptoNotificationMetadata
 */
export class GaveCryptoNotificationMetadata extends Message<GaveCryptoNotificationMetadata> {
  constructor(data?: PartialMessage<GaveCryptoNotificationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.GaveCryptoNotificationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GaveCryptoNotificationMetadata {
    return new GaveCryptoNotificationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GaveCryptoNotificationMetadata {
    return new GaveCryptoNotificationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GaveCryptoNotificationMetadata {
    return new GaveCryptoNotificationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: GaveCryptoNotificationMetadata | PlainMessage<GaveCryptoNotificationMetadata> | undefined, b: GaveCryptoNotificationMetadata | PlainMessage<GaveCryptoNotificationMetadata> | undefined): boolean {
    return proto3.util.equals(GaveCryptoNotificationMetadata, a, b);
  }
}

/**
 * @generated from message flipcash.activity.v1.ReceivedCryptoNotificationMetadata
 */
export class ReceivedCryptoNotificationMetadata extends Message<ReceivedCryptoNotificationMetadata> {
  constructor(data?: PartialMessage<ReceivedCryptoNotificationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.ReceivedCryptoNotificationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReceivedCryptoNotificationMetadata {
    return new ReceivedCryptoNotificationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReceivedCryptoNotificationMetadata {
    return new ReceivedCryptoNotificationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReceivedCryptoNotificationMetadata {
    return new ReceivedCryptoNotificationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ReceivedCryptoNotificationMetadata | PlainMessage<ReceivedCryptoNotificationMetadata> | undefined, b: ReceivedCryptoNotificationMetadata | PlainMessage<ReceivedCryptoNotificationMetadata> | undefined): boolean {
    return proto3.util.equals(ReceivedCryptoNotificationMetadata, a, b);
  }
}

/**
 * @generated from message flipcash.activity.v1.WithdrewCryptoNotificationMetadata
 */
export class WithdrewCryptoNotificationMetadata extends Message<WithdrewCryptoNotificationMetadata> {
  constructor(data?: PartialMessage<WithdrewCryptoNotificationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.WithdrewCryptoNotificationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WithdrewCryptoNotificationMetadata {
    return new WithdrewCryptoNotificationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WithdrewCryptoNotificationMetadata {
    return new WithdrewCryptoNotificationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WithdrewCryptoNotificationMetadata {
    return new WithdrewCryptoNotificationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: WithdrewCryptoNotificationMetadata | PlainMessage<WithdrewCryptoNotificationMetadata> | undefined, b: WithdrewCryptoNotificationMetadata | PlainMessage<WithdrewCryptoNotificationMetadata> | undefined): boolean {
    return proto3.util.equals(WithdrewCryptoNotificationMetadata, a, b);
  }
}

/**
 * @generated from message flipcash.activity.v1.SentCryptoNotificationMetadata
 */
export class SentCryptoNotificationMetadata extends Message<SentCryptoNotificationMetadata> {
  /**
   * The vault of the gift card account that was created for the cash link
   *
   * @generated from field: flipcash.common.v1.PublicKey vault = 1;
   */
  vault?: PublicKey;

  /**
   * Whether the cancel action can be initiated by the user
   *
   * @generated from field: bool can_initiate_cancel_action = 2;
   */
  canInitiateCancelAction = false;

  constructor(data?: PartialMessage<SentCryptoNotificationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.SentCryptoNotificationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vault", kind: "message", T: PublicKey },
    { no: 2, name: "can_initiate_cancel_action", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SentCryptoNotificationMetadata {
    return new SentCryptoNotificationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SentCryptoNotificationMetadata {
    return new SentCryptoNotificationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SentCryptoNotificationMetadata {
    return new SentCryptoNotificationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SentCryptoNotificationMetadata | PlainMessage<SentCryptoNotificationMetadata> | undefined, b: SentCryptoNotificationMetadata | PlainMessage<SentCryptoNotificationMetadata> | undefined): boolean {
    return proto3.util.equals(SentCryptoNotificationMetadata, a, b);
  }
}

/**
 * @generated from message flipcash.activity.v1.DepositedCryptoNotificationMetadata
 */
export class DepositedCryptoNotificationMetadata extends Message<DepositedCryptoNotificationMetadata> {
  constructor(data?: PartialMessage<DepositedCryptoNotificationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.DepositedCryptoNotificationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DepositedCryptoNotificationMetadata {
    return new DepositedCryptoNotificationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DepositedCryptoNotificationMetadata {
    return new DepositedCryptoNotificationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DepositedCryptoNotificationMetadata {
    return new DepositedCryptoNotificationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DepositedCryptoNotificationMetadata | PlainMessage<DepositedCryptoNotificationMetadata> | undefined, b: DepositedCryptoNotificationMetadata | PlainMessage<DepositedCryptoNotificationMetadata> | undefined): boolean {
    return proto3.util.equals(DepositedCryptoNotificationMetadata, a, b);
  }
}

/**
 * @generated from message flipcash.activity.v1.PaidCryptoNotificationMetadata
 */
export class PaidCryptoNotificationMetadata extends Message<PaidCryptoNotificationMetadata> {
  /**
   * @generated from oneof flipcash.activity.v1.PaidCryptoNotificationMetadata.payment_metadata
   */
  paymentMetadata: {
    /**
     * @generated from field: flipcash.activity.v1.PaidCryptoNotificationMetadata.PoolPaymentMetadata pool = 1;
     */
    value: PaidCryptoNotificationMetadata_PoolPaymentMetadata;
    case: "pool";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PaidCryptoNotificationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.PaidCryptoNotificationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: PaidCryptoNotificationMetadata_PoolPaymentMetadata, oneof: "payment_metadata" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaidCryptoNotificationMetadata {
    return new PaidCryptoNotificationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaidCryptoNotificationMetadata {
    return new PaidCryptoNotificationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaidCryptoNotificationMetadata {
    return new PaidCryptoNotificationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: PaidCryptoNotificationMetadata | PlainMessage<PaidCryptoNotificationMetadata> | undefined, b: PaidCryptoNotificationMetadata | PlainMessage<PaidCryptoNotificationMetadata> | undefined): boolean {
    return proto3.util.equals(PaidCryptoNotificationMetadata, a, b);
  }
}

/**
 * Payment metadata for betting pools
 *
 * @generated from message flipcash.activity.v1.PaidCryptoNotificationMetadata.PoolPaymentMetadata
 */
export class PaidCryptoNotificationMetadata_PoolPaymentMetadata extends Message<PaidCryptoNotificationMetadata_PoolPaymentMetadata> {
  /**
   * The pool that was entered for this payment
   *
   * @generated from field: flipcash.pool.v1.PoolId pool_id = 1;
   */
  poolId?: PoolId;

  constructor(data?: PartialMessage<PaidCryptoNotificationMetadata_PoolPaymentMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.PaidCryptoNotificationMetadata.PoolPaymentMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "message", T: PoolId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaidCryptoNotificationMetadata_PoolPaymentMetadata {
    return new PaidCryptoNotificationMetadata_PoolPaymentMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaidCryptoNotificationMetadata_PoolPaymentMetadata {
    return new PaidCryptoNotificationMetadata_PoolPaymentMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaidCryptoNotificationMetadata_PoolPaymentMetadata {
    return new PaidCryptoNotificationMetadata_PoolPaymentMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: PaidCryptoNotificationMetadata_PoolPaymentMetadata | PlainMessage<PaidCryptoNotificationMetadata_PoolPaymentMetadata> | undefined, b: PaidCryptoNotificationMetadata_PoolPaymentMetadata | PlainMessage<PaidCryptoNotificationMetadata_PoolPaymentMetadata> | undefined): boolean {
    return proto3.util.equals(PaidCryptoNotificationMetadata_PoolPaymentMetadata, a, b);
  }
}

/**
 * @generated from message flipcash.activity.v1.DistributedCryptoNotificationMetadata
 */
export class DistributedCryptoNotificationMetadata extends Message<DistributedCryptoNotificationMetadata> {
  /**
   * @generated from oneof flipcash.activity.v1.DistributedCryptoNotificationMetadata.distribution_metadata
   */
  distributionMetadata: {
    /**
     * @generated from field: flipcash.activity.v1.DistributedCryptoNotificationMetadata.PoolDistributionMetadata pool = 1;
     */
    value: DistributedCryptoNotificationMetadata_PoolDistributionMetadata;
    case: "pool";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DistributedCryptoNotificationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.DistributedCryptoNotificationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: DistributedCryptoNotificationMetadata_PoolDistributionMetadata, oneof: "distribution_metadata" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributedCryptoNotificationMetadata {
    return new DistributedCryptoNotificationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributedCryptoNotificationMetadata {
    return new DistributedCryptoNotificationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributedCryptoNotificationMetadata {
    return new DistributedCryptoNotificationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DistributedCryptoNotificationMetadata | PlainMessage<DistributedCryptoNotificationMetadata> | undefined, b: DistributedCryptoNotificationMetadata | PlainMessage<DistributedCryptoNotificationMetadata> | undefined): boolean {
    return proto3.util.equals(DistributedCryptoNotificationMetadata, a, b);
  }
}

/**
 * Distribution metadata for betting pools
 *
 * @generated from message flipcash.activity.v1.DistributedCryptoNotificationMetadata.PoolDistributionMetadata
 */
export class DistributedCryptoNotificationMetadata_PoolDistributionMetadata extends Message<DistributedCryptoNotificationMetadata_PoolDistributionMetadata> {
  /**
   * The pool where funds were distributed from
   *
   * @generated from field: flipcash.pool.v1.PoolId pool_id = 1;
   */
  poolId?: PoolId;

  /**
   * The outcome for this pool for the user that indicates the reason for
   * receiving the distribution.
   *
   * @generated from field: flipcash.pool.v1.UserOutcome outcome = 2;
   */
  outcome = UserOutcome.UNKNOWN_OUTCOE;

  constructor(data?: PartialMessage<DistributedCryptoNotificationMetadata_PoolDistributionMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.activity.v1.DistributedCryptoNotificationMetadata.PoolDistributionMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "message", T: PoolId },
    { no: 2, name: "outcome", kind: "enum", T: proto3.getEnumType(UserOutcome) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributedCryptoNotificationMetadata_PoolDistributionMetadata {
    return new DistributedCryptoNotificationMetadata_PoolDistributionMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributedCryptoNotificationMetadata_PoolDistributionMetadata {
    return new DistributedCryptoNotificationMetadata_PoolDistributionMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributedCryptoNotificationMetadata_PoolDistributionMetadata {
    return new DistributedCryptoNotificationMetadata_PoolDistributionMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: DistributedCryptoNotificationMetadata_PoolDistributionMetadata | PlainMessage<DistributedCryptoNotificationMetadata_PoolDistributionMetadata> | undefined, b: DistributedCryptoNotificationMetadata_PoolDistributionMetadata | PlainMessage<DistributedCryptoNotificationMetadata_PoolDistributionMetadata> | undefined): boolean {
    return proto3.util.equals(DistributedCryptoNotificationMetadata_PoolDistributionMetadata, a, b);
  }
}

