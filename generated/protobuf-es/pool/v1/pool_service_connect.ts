// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file pool/v1/pool_service.proto (package flipcash.pool.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ClosePoolRequest, ClosePoolResponse, CreatePoolRequest, CreatePoolResponse, GetPagedPoolsRequest, GetPagedPoolsResponse, GetPoolRequest, GetPoolResponse, MakeBetRequest, MakeBetResponse, ResolvePoolRequest, ResolvePoolResponse } from "./pool_service_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service flipcash.pool.v1.Pool
 */
export const Pool = {
  typeName: "flipcash.pool.v1.Pool",
  methods: {
    /**
     * CreatePool creates a new pool
     *
     * @generated from rpc flipcash.pool.v1.Pool.CreatePool
     */
    createPool: {
      name: "CreatePool",
      I: CreatePoolRequest,
      O: CreatePoolResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetPool gets pool metadata by its ID
     *
     * @generated from rpc flipcash.pool.v1.Pool.GetPool
     */
    getPool: {
      name: "GetPool",
      I: GetPoolRequest,
      O: GetPoolResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetPagedPools gets all pools for a user over a paging API
     *
     * Note: Only bet summaries are provided in the response
     *
     * @generated from rpc flipcash.pool.v1.Pool.GetPagedPools
     */
    getPagedPools: {
      name: "GetPagedPools",
      I: GetPagedPoolsRequest,
      O: GetPagedPoolsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ClosePool closes a pool from additional bets
     *
     * @generated from rpc flipcash.pool.v1.Pool.ClosePool
     */
    closePool: {
      name: "ClosePool",
      I: ClosePoolRequest,
      O: ClosePoolResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ResolvePool resolves a pool by declaring the pool's outcome. The pool creator
     * resolves a pool by calling this RPC first, then SubmitIntent to distribute funds
     * to the winning participants.
     *
     * @generated from rpc flipcash.pool.v1.Pool.ResolvePool
     */
    resolvePool: {
      name: "ResolvePool",
      I: ResolvePoolRequest,
      O: ResolvePoolResponse,
      kind: MethodKind.Unary,
    },
    /**
     * MakeBet creates a new bet against a pool. Pool participants make a bet by
     * calling MakeBet to create an initially unpaid bet, then SubmitIntent for
     * payment where:
     *  1. Intent ID == Bet.id
     *  2. Payment amount == PoolMetadata.buy_in
     *  3. Payment destination == PoolMetadata.funding_destination
     * Bets can be changed as long as payment has not been received. Clients must
     * use the same Bet ID when updating their bet.
     *
     * @generated from rpc flipcash.pool.v1.Pool.MakeBet
     */
    makeBet: {
      name: "MakeBet",
      I: MakeBetRequest,
      O: MakeBetResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

