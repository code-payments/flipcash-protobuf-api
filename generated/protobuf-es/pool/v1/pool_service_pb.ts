// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file pool/v1/pool_service.proto (package flipcash.pool.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { BetMetadata, PoolId, PoolMetadata } from "./model_pb";
import { Auth } from "../../common/v1/common_pb";

/**
 * @generated from message flipcash.pool.v1.CreatePoolRequest
 */
export class CreatePoolRequest extends Message<CreatePoolRequest> {
  /**
   * @generated from field: flipcash.pool.v1.PoolMetadata pool = 1;
   */
  pool?: PoolMetadata;

  /**
   * @generated from field: flipcash.common.v1.Auth auth = 2;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<CreatePoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.pool.v1.CreatePoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: PoolMetadata },
    { no: 2, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePoolRequest {
    return new CreatePoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePoolRequest {
    return new CreatePoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePoolRequest {
    return new CreatePoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePoolRequest | PlainMessage<CreatePoolRequest> | undefined, b: CreatePoolRequest | PlainMessage<CreatePoolRequest> | undefined): boolean {
    return proto3.util.equals(CreatePoolRequest, a, b);
  }
}

/**
 * @generated from message flipcash.pool.v1.CreatePoolResponse
 */
export class CreatePoolResponse extends Message<CreatePoolResponse> {
  constructor(data?: PartialMessage<CreatePoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.pool.v1.CreatePoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePoolResponse {
    return new CreatePoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePoolResponse {
    return new CreatePoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePoolResponse {
    return new CreatePoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePoolResponse | PlainMessage<CreatePoolResponse> | undefined, b: CreatePoolResponse | PlainMessage<CreatePoolResponse> | undefined): boolean {
    return proto3.util.equals(CreatePoolResponse, a, b);
  }
}

/**
 * @generated from enum flipcash.pool.v1.CreatePoolResponse.Result
 */
export enum CreatePoolResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: RENDEZVOUS_EXISTS = 1;
   */
  RENDEZVOUS_EXISTS = 1,

  /**
   * @generated from enum value: FUNDING_DESTINATION_EXISTS = 2;
   */
  FUNDING_DESTINATION_EXISTS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CreatePoolResponse_Result)
proto3.util.setEnumType(CreatePoolResponse_Result, "flipcash.pool.v1.CreatePoolResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "RENDEZVOUS_EXISTS" },
  { no: 2, name: "FUNDING_DESTINATION_EXISTS" },
]);

/**
 * @generated from message flipcash.pool.v1.GetPoolRequest
 */
export class GetPoolRequest extends Message<GetPoolRequest> {
  /**
   * @generated from field: flipcash.pool.v1.PoolId id = 1;
   */
  id?: PoolId;

  constructor(data?: PartialMessage<GetPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.pool.v1.GetPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: PoolId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPoolRequest {
    return new GetPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPoolRequest {
    return new GetPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPoolRequest {
    return new GetPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPoolRequest | PlainMessage<GetPoolRequest> | undefined, b: GetPoolRequest | PlainMessage<GetPoolRequest> | undefined): boolean {
    return proto3.util.equals(GetPoolRequest, a, b);
  }
}

/**
 * @generated from message flipcash.pool.v1.GetPoolResponse
 */
export class GetPoolResponse extends Message<GetPoolResponse> {
  /**
   * @generated from field: flipcash.pool.v1.PoolMetadata pool = 2;
   */
  pool?: PoolMetadata;

  constructor(data?: PartialMessage<GetPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.pool.v1.GetPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pool", kind: "message", T: PoolMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPoolResponse {
    return new GetPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPoolResponse {
    return new GetPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPoolResponse {
    return new GetPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPoolResponse | PlainMessage<GetPoolResponse> | undefined, b: GetPoolResponse | PlainMessage<GetPoolResponse> | undefined): boolean {
    return proto3.util.equals(GetPoolResponse, a, b);
  }
}

/**
 * @generated from enum flipcash.pool.v1.GetPoolResponse.Result
 */
export enum GetPoolResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: NOT_FOUND = 1;
   */
  NOT_FOUND = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetPoolResponse_Result)
proto3.util.setEnumType(GetPoolResponse_Result, "flipcash.pool.v1.GetPoolResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "NOT_FOUND" },
]);

/**
 * @generated from message flipcash.pool.v1.MakeBetRequest
 */
export class MakeBetRequest extends Message<MakeBetRequest> {
  /**
   * @generated from field: flipcash.pool.v1.PoolId pool_id = 1;
   */
  poolId?: PoolId;

  /**
   * @generated from field: flipcash.pool.v1.BetMetadata bet = 2;
   */
  bet?: BetMetadata;

  /**
   * @generated from field: flipcash.common.v1.Auth auth = 3;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<MakeBetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.pool.v1.MakeBetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "message", T: PoolId },
    { no: 2, name: "bet", kind: "message", T: BetMetadata },
    { no: 3, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MakeBetRequest {
    return new MakeBetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MakeBetRequest {
    return new MakeBetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MakeBetRequest {
    return new MakeBetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MakeBetRequest | PlainMessage<MakeBetRequest> | undefined, b: MakeBetRequest | PlainMessage<MakeBetRequest> | undefined): boolean {
    return proto3.util.equals(MakeBetRequest, a, b);
  }
}

/**
 * @generated from message flipcash.pool.v1.MakeBetResponse
 */
export class MakeBetResponse extends Message<MakeBetResponse> {
  constructor(data?: PartialMessage<MakeBetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.pool.v1.MakeBetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MakeBetResponse {
    return new MakeBetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MakeBetResponse {
    return new MakeBetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MakeBetResponse {
    return new MakeBetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MakeBetResponse | PlainMessage<MakeBetResponse> | undefined, b: MakeBetResponse | PlainMessage<MakeBetResponse> | undefined): boolean {
    return proto3.util.equals(MakeBetResponse, a, b);
  }
}

/**
 * @generated from enum flipcash.pool.v1.MakeBetResponse.Result
 */
export enum MakeBetResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: POOL_NOT_FOUND = 1;
   */
  POOL_NOT_FOUND = 1,

  /**
   * @generated from enum value: POOL_CLOSED = 2;
   */
  POOL_CLOSED = 2,

  /**
   * @generated from enum value: BET_ALREADY_MADE = 3;
   */
  BET_ALREADY_MADE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(MakeBetResponse_Result)
proto3.util.setEnumType(MakeBetResponse_Result, "flipcash.pool.v1.MakeBetResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "POOL_NOT_FOUND" },
  { no: 2, name: "POOL_CLOSED" },
  { no: 3, name: "BET_ALREADY_MADE" },
]);

