// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file pool/v1/model.proto (package flipcash.pool.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { FiatPaymentAmount, PublicKey, Signature, UserId } from "../../common/v1/common_pb";

/**
 * PoolId uniquely identifies a pool via a rendezvous public key
 *
 * @generated from message flipcash.pool.v1.PoolId
 */
export class PoolId extends Message<PoolId> {
  /**
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<PoolId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.pool.v1.PoolId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolId {
    return new PoolId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolId {
    return new PoolId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolId {
    return new PoolId().fromJsonString(jsonString, options);
  }

  static equals(a: PoolId | PlainMessage<PoolId> | undefined, b: PoolId | PlainMessage<PoolId> | undefined): boolean {
    return proto3.util.equals(PoolId, a, b);
  }
}

/**
 * Pool metadata
 *
 * @generated from message flipcash.pool.v1.PoolMetadata
 */
export class PoolMetadata extends Message<PoolMetadata> {
  /**
   * @generated from field: flipcash.pool.v1.PoolId id = 1;
   */
  id?: PoolId;

  /**
   * The user ID that created this pool
   *
   * @generated from field: flipcash.common.v1.UserId creator = 2;
   */
  creator?: UserId;

  /**
   * The pool name, which should ask a yes/no question to bet against
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * The buy in amount for a bet
   *
   * @generated from field: flipcash.common.v1.FiatPaymentAmount buy_in = 4;
   */
  buyIn?: FiatPaymentAmount;

  /**
   * Destination where bet payments will be made to fund the pool
   *
   * @generated from field: flipcash.common.v1.PublicKey funding_destination = 5;
   */
  fundingDestination?: PublicKey;

  /**
   * Is the pool currently open to take bets?
   *
   * @generated from field: bool is_open = 6;
   */
  isOpen = false;

  /**
   * Timestamp pool was created at
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * Signature of the PoolMetadata message with the rendezvous public key of the pool
   *
   * @generated from field: flipcash.common.v1.Signature rendezvous_signature = 8;
   */
  rendezvousSignature?: Signature;

  /**
   * The set of bets (with verified payment) made against this pool
   *
   * @generated from field: repeated flipcash.pool.v1.BetMetadata bets = 9;
   */
  bets: BetMetadata[] = [];

  constructor(data?: PartialMessage<PoolMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.pool.v1.PoolMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: PoolId },
    { no: 2, name: "creator", kind: "message", T: UserId },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "buy_in", kind: "message", T: FiatPaymentAmount },
    { no: 5, name: "funding_destination", kind: "message", T: PublicKey },
    { no: 6, name: "is_open", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
    { no: 8, name: "rendezvous_signature", kind: "message", T: Signature },
    { no: 9, name: "bets", kind: "message", T: BetMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolMetadata {
    return new PoolMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolMetadata {
    return new PoolMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolMetadata {
    return new PoolMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: PoolMetadata | PlainMessage<PoolMetadata> | undefined, b: PoolMetadata | PlainMessage<PoolMetadata> | undefined): boolean {
    return proto3.util.equals(PoolMetadata, a, b);
  }
}

/**
 * BetId uniquely identifies a bet via an intent ID
 *
 * @generated from message flipcash.pool.v1.BetId
 */
export class BetId extends Message<BetId> {
  /**
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<BetId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.pool.v1.BetId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BetId {
    return new BetId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BetId {
    return new BetId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BetId {
    return new BetId().fromJsonString(jsonString, options);
  }

  static equals(a: BetId | PlainMessage<BetId> | undefined, b: BetId | PlainMessage<BetId> | undefined): boolean {
    return proto3.util.equals(BetId, a, b);
  }
}

/**
 * Bet metadata
 *
 * @generated from message flipcash.pool.v1.BetMetadata
 */
export class BetMetadata extends Message<BetMetadata> {
  /**
   * @generated from field: flipcash.pool.v1.BetId bet_id = 1;
   */
  betId?: BetId;

  /**
   * The user making the bet, which is unique for a given pool
   *
   * @generated from field: flipcash.common.v1.UserId user_id = 2;
   */
  userId?: UserId;

  /**
   * The yes/no outcome the user has bet against
   *
   * @generated from field: bool selected_outcome = 3;
   */
  selectedOutcome = false;

  /**
   * The destination where payout will be made if the user selected the correct
   * outcome.
   *
   * @generated from field: flipcash.common.v1.PublicKey payout_destination = 4;
   */
  payoutDestination?: PublicKey;

  /**
   * Timestamp the bet was made
   *
   * @generated from field: google.protobuf.Timestamp ts = 5;
   */
  ts?: Timestamp;

  /**
   * Signature of the BetMetadata message with the rendezvous public key of the pool
   *
   * @generated from field: flipcash.common.v1.Signature rendezvous_signature = 6;
   */
  rendezvousSignature?: Signature;

  constructor(data?: PartialMessage<BetMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipcash.pool.v1.BetMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bet_id", kind: "message", T: BetId },
    { no: 2, name: "user_id", kind: "message", T: UserId },
    { no: 3, name: "selected_outcome", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "payout_destination", kind: "message", T: PublicKey },
    { no: 5, name: "ts", kind: "message", T: Timestamp },
    { no: 6, name: "rendezvous_signature", kind: "message", T: Signature },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BetMetadata {
    return new BetMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BetMetadata {
    return new BetMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BetMetadata {
    return new BetMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: BetMetadata | PlainMessage<BetMetadata> | undefined, b: BetMetadata | PlainMessage<BetMetadata> | undefined): boolean {
    return proto3.util.equals(BetMetadata, a, b);
  }
}

